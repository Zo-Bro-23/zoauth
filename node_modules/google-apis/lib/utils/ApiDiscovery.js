'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _dec, _class;

///////////////////////////////////////////////////////////////////////////////
// @file         : ApiDiscovery.js                                           //
// @summary      : Google API Discovery Service interface                    //
// @version      : 1.0.0                                                     //
// @project      : N/A                                                       //
// @description  : Reference: developers.google.com/discovery/v1/reference   //
// @author       : Benjamin Maggi                                            //
// @email        : benjaminmaggi@gmail.com                                   //
// @date         : 17 Sep 2017                                               //
// @license:     : MIT                                                       //
// ------------------------------------------------------------------------- //
//                                                                           //
// Copyright 2017 Benjamin Maggi <benjaminmaggi@gmail.com>                   //
//                                                                           //
//                                                                           //
// License:                                                                  //
// Permission is hereby granted, free of charge, to any person obtaining a   //
// copy of this software and associated documentation files                  //
// (the "Software"), to deal in the Software without restriction, including  //
// without limitation the rights to use, copy, modify, merge, publish,       //
// distribute, sublicense, and/or sell copies of the Software, and to permit //
// persons to whom the Software is furnished to do so, subject to the        //
// following conditions:                                                     //
//                                                                           //
// The above copyright notice and this permission notice shall be included   //
// in all copies or substantial portions of the Software.                    //
//                                                                           //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   //
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                //
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.    //
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY      //
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,      //
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE         //
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                    //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _url = require('url');

var _Http = require('./Http');

var _Http2 = _interopRequireDefault(_Http);

var _flowRuntime = require('flow-runtime');

var _flowRuntime2 = _interopRequireDefault(_flowRuntime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _promise2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _promise2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const DirectoryItem = _flowRuntime2.default.type('DirectoryItem', _flowRuntime2.default.object(_flowRuntime2.default.property('discoveryRestUrl', _flowRuntime2.default.string()), _flowRuntime2.default.property('version', _flowRuntime2.default.string()), _flowRuntime2.default.property('documentationLink', _flowRuntime2.default.string())));

const Api = _flowRuntime2.default.type('Api', _flowRuntime2.default.object(_flowRuntime2.default.property('id', _flowRuntime2.default.string()), _flowRuntime2.default.property('name', _flowRuntime2.default.string()), _flowRuntime2.default.property('version', _flowRuntime2.default.string())));

const ListParams = _flowRuntime2.default.type('ListParams', _flowRuntime2.default.object(_flowRuntime2.default.property('name', _flowRuntime2.default.string()), _flowRuntime2.default.property('preferred', _flowRuntime2.default.boolean())));

let ApiDiscovery = (_dec = _flowRuntime2.default.annotate(_flowRuntime2.default.class('ApiDiscovery', _flowRuntime2.default.staticMethod('list', _flowRuntime2.default.param('name', _flowRuntime2.default.string()), _flowRuntime2.default.param('preferred', _flowRuntime2.default.boolean()), _flowRuntime2.default.return(_flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential()))), _flowRuntime2.default.staticMethod('getRest', _flowRuntime2.default.param('api', _flowRuntime2.default.union(_flowRuntime2.default.string(), DirectoryItem)), _flowRuntime2.default.param('params', _flowRuntime2.default.object()), _flowRuntime2.default.return(_flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential()))), _flowRuntime2.default.method('init'), _flowRuntime2.default.property('list', _flowRuntime2.default.any()), _flowRuntime2.default.property('getRest', _flowRuntime2.default.any()), _flowRuntime2.default.method('getSchemas', _flowRuntime2.default.param('api', _flowRuntime2.default.union(_flowRuntime2.default.string(), DirectoryItem)), _flowRuntime2.default.return(_flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential()))))), _dec(_class = class ApiDiscovery {
  constructor() {
    this.list = ApiDiscovery.list;
    this.getRest = ApiDiscovery.getRest;
  }

  static list(name, preferred = true) {
    return _asyncToGenerator(function* () {
      let _nameType = _flowRuntime2.default.string();

      let _preferredType = _flowRuntime2.default.boolean();

      const _returnType = _flowRuntime2.default.return(_flowRuntime2.default.union(_flowRuntime2.default.existential(), _flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential())));

      _flowRuntime2.default.param('name', _nameType).assert(name);

      _flowRuntime2.default.param('preferred', _preferredType, true).assert(preferred);

      const params = ListParams.assert({ name, preferred });
      try {
        const { items } = yield _Http2.default.get('discovery/v1/apis', { params });
        if (params.name && items.length === 1) {
          return _returnType.assert(items.reverse().slice(-1).pop());
        } else {
          return _returnType.assert(items);
        }
      } catch (error) {
        console.error(error);
        return _returnType.assert(error);
      }
    })();
  }

  static getRest(api, params) {
    return _asyncToGenerator(function* () {
      let _apiType = _flowRuntime2.default.union(_flowRuntime2.default.string(), DirectoryItem);

      let _paramsType = _flowRuntime2.default.object();

      const _returnType2 = _flowRuntime2.default.return(_flowRuntime2.default.union(_flowRuntime2.default.existential(), _flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential())));

      _flowRuntime2.default.param('api', _apiType).assert(api);

      _flowRuntime2.default.param('params', _paramsType, true).assert(params);

      try {
        const { discoveryRestUrl } = typeof api === 'string' || api instanceof String ? yield ApiDiscovery.list(api) : api;
        return _returnType2.assert((yield _Http2.default.get(discoveryRestUrl, { params })));
      } catch (error) {
        return _returnType2.assert(error);
      }
    })();
  }

  init() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        const item = yield _this.list('discovery');
        const description = yield _this.getRest(item);
        _this.service = { item, description };
        return _this;
      } catch (error) {
        console.error(error);
        return error;
      }
    })();
  }

  getSchemas(api) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      let _apiType2 = _flowRuntime2.default.union(_flowRuntime2.default.string(), DirectoryItem);

      const _returnType3 = _flowRuntime2.default.return(_flowRuntime2.default.union(_flowRuntime2.default.existential(), _flowRuntime2.default.ref('Promise', _flowRuntime2.default.existential())));

      _flowRuntime2.default.param('api', _apiType2).assert(api);

      const params = {
        fields: 'schemas'
      };
      try {
        return _returnType3.assert((yield _this2.getRest(api, params)));
      } catch (error) {
        console.error(error);
        return _returnType3.assert(error);
      }
    })();
  }
}) || _class);
exports.default = ApiDiscovery;