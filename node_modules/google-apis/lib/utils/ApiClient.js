'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends = _assign2.default || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _class;

///////////////////////////////////////////////////////////////////////////////
// @file         : ApiClient.js                                              //
// @summary      : Dynamic Google API Client builder                         //
// @version      : 1.0.0                                                     //
// @project      : N/A                                                       //
// @description  : Reference: developers.google.com/discovery/v1/reference   //
// @author       : Benjamin Maggi                                            //
// @email        : benjaminmaggi@gmail.com                                   //
// @date         : 17 Sep 2017                                               //
// @license:     : MIT                                                       //
// ------------------------------------------------------------------------- //
//                                                                           //
// Copyright 2017 Benjamin Maggi <benjaminmaggi@gmail.com>                   //
//                                                                           //
//                                                                           //
// License:                                                                  //
// Permission is hereby granted, free of charge, to any person obtaining a   //
// copy of this software and associated documentation files                  //
// (the "Software"), to deal in the Software without restriction, including  //
// without limitation the rights to use, copy, modify, merge, publish,       //
// distribute, sublicense, and/or sell copies of the Software, and to permit //
// persons to whom the Software is furnished to do so, subject to the        //
// following conditions:                                                     //
//                                                                           //
// The above copyright notice and this permission notice shall be included   //
// in all copies or substantial portions of the Software.                    //
//                                                                           //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   //
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                //
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.    //
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY      //
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,      //
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE         //
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                    //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _ApiDiscovery = require('./ApiDiscovery');

var _ApiDiscovery2 = _interopRequireDefault(_ApiDiscovery);

var _Http = require('./Http');

var _Http2 = _interopRequireDefault(_Http);

var _flowRuntime = require('flow-runtime');

var _flowRuntime2 = _interopRequireDefault(_flowRuntime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _promise2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _promise2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Options = _flowRuntime2.default.type('Options', _flowRuntime2.default.object(_flowRuntime2.default.property('baseURL', _flowRuntime2.default.string())));

let ApiClient = (_dec = _flowRuntime2.default.annotate(_flowRuntime2.default.class('ApiClient', _flowRuntime2.default.method('constructor', _flowRuntime2.default.param('_arg', _flowRuntime2.default.any())), _flowRuntime2.default.method('init', _flowRuntime2.default.param('api', _flowRuntime2.default.string())), _flowRuntime2.default.method('dict', _flowRuntime2.default.param('entries', _flowRuntime2.default.any())), _flowRuntime2.default.method('validator', _flowRuntime2.default.param('parameters', _flowRuntime2.default.any())), _flowRuntime2.default.method('buildMethods', _flowRuntime2.default.param('methods', _flowRuntime2.default.any()), _flowRuntime2.default.param('baseUrl', _flowRuntime2.default.any())), _flowRuntime2.default.method('buildResources', _flowRuntime2.default.param('resources', _flowRuntime2.default.any()), _flowRuntime2.default.param('baseURL', _flowRuntime2.default.any())))), _dec(_class = class ApiClient {

  constructor({ api, key, version }) {
    this.api = api;
    this.key = key;
    this.version = version;
  }

  init(api = this.api) {
    var _this = this;

    return _asyncToGenerator(function* () {
      let _apiType = _flowRuntime2.default.string();

      _flowRuntime2.default.param('api', _apiType, true).assert(api);

      try {
        const { resources, baseUrl: baseURL } = yield _ApiDiscovery2.default.getRest(api, { fields: 'resources,baseUrl' });
        _this.$resource = _this.buildResources(resources, baseURL);
        return _this;
      } catch (error) {
        console.error(error);
        return error;
      }
    })();
  }

  dict(entries) {
    if (Array.isArray(entries) && entries.length) {
      return (0, _assign2.default)({}, ...entries.map(([key, value]) => ({ [key]: value })));
    } else {
      return null;
    }
  }

  validator(parameters) {
    let _parametersType = _flowRuntime2.default.any();

    _flowRuntime2.default.param('parameters', _parametersType).assert(parameters);

    const required = (0, _entries2.default)(parameters).filter(([name, parameter]) => parameter.required).map(([name, parameter]) => name);

    const assumed = (0, _entries2.default)(parameters).filter(([name, parameter]) => parameter.default).map(([name, parameter]) => [name, parameter.default]);

    const entries = (0, _entries2.default)(parameters);
    const keys = (0, _keys2.default)(parameters);
    // const requiredX = entries.filter(([ key, value ]) => value.required).map(([ name, parameter ]) => name);
    const schema = entries.reduce((schema, [key, value]) => {
      return (0, _assign2.default)({}, schema, {
        [key]: {
          type: value.type,
          default: value.default,
          minimum: value.minimum,
          maximum: value.maximum
        }
      });
    }, {});

    return _flowRuntime2.default.annotate(function (expression) {
      let _expressionType = _flowRuntime2.default.any();

      _flowRuntime2.default.param('expression', _expressionType).assert(expression);

      return true;
    }, _flowRuntime2.default.function(_flowRuntime2.default.param('expression', _flowRuntime2.default.any())));
  }

  buildMethods(methods, baseUrl) {
    return methods.reduce((actions, [name, { httpMethod, path, parameters, response }]) => {
      /*
      const required = Object
        .entries(parameters)
        .filter(([ name, parameter ]) => parameter.required)
        .map(([ name, parameter ]) => ([name, null]));
       const assumed = Object
        .entries(parameters)
        .filter(([ name, parameter ]) => parameter.default)
        .map(([ name, parameter ]) => ([name, parameter.default]));
      */

      const request = _flowRuntime2.default.annotate(function request(validator, config) {
        let _validatorType = _flowRuntime2.default.any();

        let _configType = _flowRuntime2.default.any();

        _flowRuntime2.default.param('validator', _validatorType).assert(validator);

        _flowRuntime2.default.param('config', _configType).assert(config);

        /*
        const validEntries = Object.entries(parameters);
        const validKeys = Object.keys(parameters);
        const requiredKeys = validEntries.filter(([ key, value ]) => value.required).map(([ name, parameter ]) => name);
        const validSchema = validEntries.reduce((schema, [key, value]) => {
          return Object.assign({}, schema, {
            [key]: {
              type: value.type,
              default: value.default,
              minimum: value.minimum,
              maximum: value.maximum,
            }
          });
        }, {});
        */

        switch (config.method.toUpperCase()) {

          case 'GET':
            {
              return _flowRuntime2.default.annotate((() => {
                var _ref = _asyncToGenerator(function* (params) {
                  let _paramsType = _flowRuntime2.default.object();

                  _flowRuntime2.default.param('params', _paramsType, true).assert(params);

                  return yield (0, _Http2.default)(_extends({}, config, { params }));
                });

                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              })(), _flowRuntime2.default.function(_flowRuntime2.default.param('params', _flowRuntime2.default.object())));
            }

          case 'POST':
            {
              if (validator) {
                return _flowRuntime2.default.annotate((() => {
                  var _ref2 = _asyncToGenerator(function* (params, data) {
                    let _paramsType2 = _flowRuntime2.default.object();

                    let _dataType = _flowRuntime2.default.object();

                    _flowRuntime2.default.param('params', _paramsType2, true).assert(params);

                    _flowRuntime2.default.param('data', _dataType, true).assert(data);

                    return yield (0, _Http2.default)(_extends({}, config, { params, data }));
                  });

                  return function (_x2, _x3) {
                    return _ref2.apply(this, arguments);
                  };
                })(), _flowRuntime2.default.function(_flowRuntime2.default.param('params', _flowRuntime2.default.object()), _flowRuntime2.default.param('data', _flowRuntime2.default.object())));
              } else {
                return _flowRuntime2.default.annotate((() => {
                  var _ref3 = _asyncToGenerator(function* (data) {
                    let _dataType2 = _flowRuntime2.default.object();

                    _flowRuntime2.default.param('data', _dataType2, true).assert(data);

                    return yield (0, _Http2.default)(_extends({}, config, { data }));
                  });

                  return function (_x4) {
                    return _ref3.apply(this, arguments);
                  };
                })(), _flowRuntime2.default.function(_flowRuntime2.default.param('data', _flowRuntime2.default.object())));
              }
            }

          case 'DELETE':
            {
              return _flowRuntime2.default.annotate((() => {
                var _ref4 = _asyncToGenerator(function* (params) {
                  let _paramsType3 = _flowRuntime2.default.object();

                  _flowRuntime2.default.param('params', _paramsType3, true).assert(params);

                  return yield (0, _Http2.default)(_extends({}, config, { params }));
                });

                return function (_x5) {
                  return _ref4.apply(this, arguments);
                };
              })(), _flowRuntime2.default.function(_flowRuntime2.default.param('params', _flowRuntime2.default.object())));
            }

          default:
            return _flowRuntime2.default.annotate((() => {
              var _ref5 = _asyncToGenerator(function* (params) {
                let _paramsType4 = _flowRuntime2.default.object();

                _flowRuntime2.default.param('params', _paramsType4, true).assert(params);

                return yield (0, _Http2.default)(_extends({}, config, { params }));
              });

              return function (_x6) {
                return _ref5.apply(this, arguments);
              };
            })(), _flowRuntime2.default.function(_flowRuntime2.default.param('params', _flowRuntime2.default.object())));
        }

        return _flowRuntime2.default.annotate((() => {
          var _ref6 = _asyncToGenerator(function* (params, data) {
            let _paramsType5 = _flowRuntime2.default.any();

            let _dataType3 = _flowRuntime2.default.any();

            _flowRuntime2.default.param('params', _paramsType5, true).assert(params);

            _flowRuntime2.default.param('data', _dataType3, true).assert(data);

            try {

              /*
              const hasValidParams = Object.entries(params)
              .every(function ([key, value]) {
                return validKeys.includes(key) && skeemas.validate(value, validSchema[key]);
              });
               const hasRequiredParams = requiredKeys.every(param => {
                return Object.keys(params).includes(param);
              });
              */

              // console.log('validKeys', validKeys)
              // console.log('requiredKeys', requiredKeys);
              // console.log('hasValidParams', hasValidParams)
              // console.log('hasRequiredParams', hasRequiredParams)
              // console.log('params', params);

              // const req = JSON.stringify({ ...config, ...{ params }},null,2);
              // console.log('REQ', req);
              if (parameters) {
                return yield (0, _Http2.default)(_extends({}, config, { params }));
              } else if (!parameters && httpMethod.toUpperCase() === 'POST') {
                return yield (0, _Http2.default)(_extends({}, config, { data: params }));
              }
              // console.log('config, params', { ...config, ...{ params }});
              // return { pageInfo: { config, ...{ params }} };
            } catch (error) {
              console.error(error);
              return error;
            }
          });

          return function (_x7, _x8) {
            return _ref6.apply(this, arguments);
          };
        })(), _flowRuntime2.default.function(_flowRuntime2.default.param('params', _flowRuntime2.default.any()), _flowRuntime2.default.param('data', _flowRuntime2.default.any())));
      }, _flowRuntime2.default.function(_flowRuntime2.default.param('validator', _flowRuntime2.default.any()), _flowRuntime2.default.param('config', _flowRuntime2.default.any())));

      const validator = parameters ? this.validator(parameters) : null;

      return (0, _assign2.default)({}, actions, {
        [name]: request(validator, _extends({}, _Http2.default.defaults.params, {
          method: httpMethod,
          // baseURL: baseUrl,
          url: path /*,
                    // url: this.service.basePath + path,
                    params: {
                    ...this.dict(required),
                    ...this.dict(assumed)
                    }*/
        }))
      });
    }, {});
  }

  buildResources(resources, baseURL) {
    _Http2.default.defaults.baseURL = baseURL;
    _Http2.default.defaults.params = { key: this.key };
    return (0, _entries2.default)(resources).reduce((resources, [name, { methods }]) => {
      return (0, _assign2.default)({}, resources, {
        [name]: this.buildMethods((0, _entries2.default)(methods))
      });
    }, {});
  }
}) || _class);
exports.default = ApiClient;