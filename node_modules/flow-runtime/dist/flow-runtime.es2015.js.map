{"version":3,"file":"flow-runtime.es2015.js","sources":["../src/primitiveTypes.js","../src/errorReporting/makeJSONError.js","../src/cyclic.js","../src/Validation.js","../src/errorReporting/RuntimeTypeError.js","../src/errorReporting/makeTypeError.js","../src/makeError.js","../src/compareTypes.js","../src/types/Type.js","../src/types/AnyType.js","../src/errorMessages.js","../src/getErrorMessage.js","../src/types/TupleType.js","../src/types/ArrayType.js","../src/types/BooleanLiteralType.js","../src/types/BooleanType.js","../src/types/EmptyType.js","../src/types/ExistentialType.js","../src/types/TypeParameter.js","../src/types/FlowIntoType.js","../src/types/FunctionTypeRestParam.js","../src/types/FunctionTypeParam.js","../src/types/FunctionTypeReturn.js","../src/symbols.js","../src/types/FunctionType.js","../src/types/GeneratorType.js","../src/types/TypeParameterApplication.js","../src/types/TypeConstructor.js","../src/types/GenericType.js","../src/invariant.js","../src/types/NullLiteralType.js","../src/types/VoidType.js","../src/types/NullableType.js","../src/typeConstraints.js","../src/types/ObjectTypeProperty.js","../src/types/ObjectTypeIndexer.js","../src/types/ObjectTypeCallProperty.js","../src/declarations/Declaration.js","../src/declarations/VarDeclaration.js","../src/declarations/TypeDeclaration.js","../src/declarations/ModuleDeclaration.js","../src/declarations/ModuleExportsDeclaration.js","../src/declarations/ClassDeclaration.js","../src/types/PartialType.js","../src/declarations/ParameterizedClassDeclaration.js","../src/declarations/ExtendsDeclaration.js","../src/types/ObjectType.js","../src/types/IntersectionType.js","../src/types/MixedType.js","../src/types/TypeAlias.js","../src/types/NumericLiteralType.js","../src/types/NumberType.js","../src/types/ParameterizedTypeAlias.js","../src/types/ParameterizedFunctionType.js","../src/types/RefinementType.js","../src/types/StringLiteralType.js","../src/types/StringType.js","../src/types/SymbolLiteralType.js","../src/types/SymbolType.js","../src/types/ThisType.js","../src/types/TypeBox.js","../src/types/TypeReference.js","../src/types/TypeTDZ.js","../src/types/UnionType.js","../src/registerPrimitiveTypes.js","../src/registerBuiltins.js","../src/registerTypePredicates.js","../src/TypeInferrer.js","../src/makeReactPropTypes.js","../src/errorReporting/makeWarningMessage.js","../src/makeUnion.js","../src/classDecorators.js","../src/annotateValue.js","../src/flowTypes/$DiffType.js","../src/flowTypes/$FlowFixMeType.js","../src/flowTypes/$KeysType.js","../src/flowTypes/$ObjMapiType.js","../src/flowTypes/$ObjMapType.js","../src/flowTypes/$PropertyType.js","../src/flowTypes/$ShapeType.js","../src/flowTypes/$SubType.js","../src/flowTypes/$SuperType.js","../src/flowTypes/$TupleMapType.js","../src/flowTypes/ClassType.js","../src/TypeContext.js","../src/globalContext.js"],"sourcesContent":["/* @flow */\n\n/**\n * This file exports a dictionary of global primitive types that are shared by all contexts.\n * It is populated in [registerPrimitiveTypes()](./registerPrimitiveTypes.js).\n */\n\nimport type {\n  Type,\n  NullLiteralType,\n  NumberType,\n  BooleanType,\n  SymbolType,\n  StringType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  VoidType\n} from './types';\n\n\n/**\n * Covers our builtin types and makes room for future ones.\n */\ntype PrimitiveTypes = {\n  null: NullLiteralType;\n  empty: EmptyType;\n  number: NumberType;\n  boolean: BooleanType;\n  string: StringType;\n  symbol: SymbolType;\n  any: AnyType;\n  mixed: MixedType;\n  void: VoidType;\n  existential: ExistentialType;\n\n  [name: string]: Type<any>;\n};\n\nconst primitiveTypes: any = {};\n\n(primitiveTypes: PrimitiveTypes);\n\nexport default primitiveTypes;","/* @flow */\n\nimport {stringifyPath, resolvePath} from '../Validation';\nimport type Validation from '../Validation';\n\nexport default function makeJSONError <T> (validation: Validation<T>) {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {input, context} = validation;\n  const errors = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : null;\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n    const field = stringifyPath(validation.path.concat(path));\n\n    const pointer = `/${path.join('/')}`;\n\n    errors.push({\n      pointer,\n      field,\n      message,\n      expected,\n      actual\n    });\n  }\n  return errors;\n}\n","/* @flow */\n\nimport type Type from './types/Type';\n\n// Tracks whether we're in validation of cyclic objects.\nconst cyclicValidation = new WeakMap();\n// Tracks whether we're toString() of cyclic objects.\nconst cyclicToString = new WeakSet();\n\nexport function inValidationCycle (type: Type<any>, input: any): boolean {\n  try {\n    const tracked = cyclicValidation.get(type);\n    if (!tracked) {\n      return false;\n    }\n    else {\n      return weakSetHas(tracked, input);\n    }\n  }\n  catch (e) {\n    // some exotic values cannot be checked\n    return true;\n  }\n}\n\nexport function startValidationCycle (type: Type<any>, input: any) {\n  let tracked = cyclicValidation.get(type);\n  if (!tracked) {\n    tracked = new WeakSet();\n    cyclicValidation.set(type, tracked);\n  }\n  weakSetAdd(tracked, input);\n}\n\nexport function endValidationCycle (type: Type<any>, input: any) {\n  const tracked = cyclicValidation.get(type);\n  if (tracked) {\n    weakSetDelete(tracked, input);\n  }\n}\n\nexport function inToStringCycle (type: Type<any>): boolean {\n  return cyclicToString.has(type);\n}\n\nexport function startToStringCycle (type: Type<any>) {\n  cyclicToString.add(type);\n}\n\nexport function endToStringCycle (type: Type<any>) {\n  cyclicToString.delete(type);\n}\n\n\nexport function weakSetHas <V: any> (weakset: WeakSet<V>, value: V): boolean {\n  try {\n    return weakset.has(value);\n  }\n  catch (e) {\n    return true;\n  }\n}\n\n\nexport function weakSetAdd <V: any> (weakset: WeakSet<V>, value: V) {\n  try {\n    weakset.add(value);\n  }\n  catch (e) {}\n}\n\n\nexport function weakSetDelete <V: any> (weakset: WeakSet<V>, value: V) {\n  try {\n    weakset.delete(value);\n  }\n  catch (e) {}\n}","/* @flow */\nimport makeJSONError from './errorReporting/makeJSONError';\n\nimport {weakSetHas, weakSetAdd, weakSetDelete} from './cyclic';\n\nimport type TypeContext from './TypeContext';\nimport type Type from './types/Type';\n\nexport type IdentifierPath = Array<string | number>;\nexport type ErrorTuple = [IdentifierPath, string, Type<any>];\n\nexport type ValidationJSON<T> = {\n  input: T;\n  errors: Array<{\n    pointer: string;\n    message: string;\n    expected: Type<any>;\n    actual: Type<any>;\n  }>\n};\n\nconst validIdentifierOrAccessor = /^[$A-Z_][0-9A-Z_$[\\].]*$/i;\n\n\nexport default class Validation<T> {\n\n  context: TypeContext;\n\n  input: T;\n\n  path: string[] = [];\n\n  prefix: string = '';\n\n  errors: ErrorTuple[] = [];\n\n  // Tracks whether we're in validation of cyclic objects.\n  cyclic: WeakMap<Type<any>, WeakSet<any>> = new WeakMap();\n\n  constructor (context: TypeContext, input: T) {\n    this.context = context;\n    this.input = input;\n  }\n\n  inCycle (type: Type<any>, input: any): boolean {\n    const tracked = this.cyclic.get(type);\n    if (!tracked) {\n      return false;\n    }\n    else {\n      return weakSetHas(tracked, input);\n    }\n  }\n\n  startCycle (type: Type<any>, input: any) {\n    let tracked = this.cyclic.get(type);\n    if (!tracked) {\n      tracked = new WeakSet();\n      this.cyclic.set(type, tracked);\n    }\n    weakSetAdd(tracked, input);\n  }\n\n  endCycle (type: Type<any>, input: any) {\n    const tracked = this.cyclic.get(type);\n    if (tracked) {\n      weakSetDelete(tracked, input);\n    }\n  }\n\n  hasErrors (path: ? IdentifierPath): boolean {\n    if (path) {\n      for (const [candidate] of this.errors) {\n        if (matchPath(path, candidate)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    else {\n      return this.errors.length > 0;\n    }\n  }\n\n  addError (path: IdentifierPath, expectedType: Type<any>, message: string): this {\n    this.errors.push([path, message, expectedType]);\n    return this;\n  }\n\n  clearError (path: ? IdentifierPath): boolean {\n    let didClear = false;\n    if (path) {\n      const errors = [];\n      for (const error of this.errors) {\n        if (matchPath(path, error[0])) {\n          didClear = true;\n        }\n        else {\n          errors.push(error);\n        }\n      }\n      this.errors = errors;\n    }\n    else {\n      didClear = this.errors.length > 0;\n      this.errors = [];\n    }\n    return didClear;\n  }\n\n  resolvePath (path: IdentifierPath): any {\n    return resolvePath(this.input, path);\n  }\n\n  toJSON (): * {\n    return makeJSONError(this);\n  }\n\n}\n\nexport function stringifyPath (path: IdentifierPath): string {\n  if (!path.length) {\n    return 'Value';\n  }\n  const {length} = path;\n  const parts = new Array(length);\n  for (let i = 0; i < length; i++) {\n    const part = path[i];\n    if (part === '[[Return Type]]') {\n      parts[i] = 'Return Type';\n    }\n    else if (typeof part !== 'string' || !validIdentifierOrAccessor.test(part)) {\n      parts[i] = `[${String(part)}]`;\n    }\n    else if (i > 0) {\n      parts[i] = `.${String(part)}`;\n    }\n    else {\n      parts[i] = String(part);\n    }\n  }\n  return parts.join('');\n}\n\nexport function resolvePath (input: any, path: IdentifierPath): any {\n  let subject = input;\n  const {length} = path;\n  for (let i = 0; i < length; i++) {\n    if (subject == null) {\n      return undefined;\n    }\n    const part = path[i];\n    if (part === '[[Return Type]]') {\n      continue;\n    }\n    if (subject instanceof Map) {\n      subject = subject.get(part);\n    }\n    else {\n      subject = subject[part];\n    }\n  }\n  return subject;\n}\n\nexport function matchPath (path: IdentifierPath, candidate: IdentifierPath): boolean {\n  const {length} = path;\n  if (length > candidate.length) {\n    return false;\n  }\n  for (let i = 0; i < length; i++) {\n    if (candidate[i] !== path[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n","/* @flow */\n\nexport default class RuntimeTypeError extends TypeError {\n  name: string = \"RuntimeTypeError\";\n}","/* @flow */\nimport {stringifyPath, resolvePath} from '../Validation';\n\nimport type Validation from '../Validation';\n\nimport RuntimeTypeError from './RuntimeTypeError';\n\nconst delimiter = '\\n-------------------------------------------------\\n\\n';\n\nexport default function makeTypeError <T> (validation: Validation<T>) {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {prefix, input, context} = validation;\n  const collected = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : \"*\";\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n\n    const field = stringifyPath(validation.path.concat(path));\n\n\n    collected.push(\n      `${field} ${message}\\n\\nExpected: ${expected}\\n\\nActual: ${actual}\\n`\n    );\n  }\n  if (prefix) {\n    return new RuntimeTypeError(`${prefix.trim()} ${collected.join(delimiter)}`);\n  }\n  else {\n    return new RuntimeTypeError(collected.join(delimiter));\n  }\n}\n","/* @flow */\n\nimport type {Type} from './types';\nimport makeTypeError from './errorReporting/makeTypeError';\n\nexport default function makeError (expected: Type<any>, input: any): ? TypeError {\n  const {context} = expected;\n  const validation = context.validate(expected, input);\n  return makeTypeError(validation);\n}\n","/* @flow */\n\nimport type Type from './types/Type';\n\nimport {\n  AnyType,\n  ExistentialType,\n  TypeParameter,\n  FlowIntoType,\n  MixedType,\n  TypeAlias,\n  TypeTDZ\n} from './types';\n\n/**\n * Given two types, A and B, compare them and return either -1, 0, or 1:\n *\n *   -1 if A cannot accept type B.\n *\n *    0 if the types are effectively identical.\n *\n *    1 if A accepts every possible B.\n */\nexport default function compareTypes (a: Type<any>, b: Type<any>): -1 | 0 | 1 {\n\n  let result;\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (b instanceof TypeAlias || b instanceof TypeParameter || b instanceof TypeTDZ) {\n    b = b.unwrap();\n  }\n\n  if (a instanceof TypeAlias) {\n    result = a.compareWith(b);\n  }\n  else if (a instanceof FlowIntoType || a instanceof TypeParameter || b instanceof FlowIntoType) {\n    result = a.compareWith(b);\n  }\n  else if (a instanceof AnyType || a instanceof ExistentialType || a instanceof MixedType) {\n    return 1;\n  }\n  else {\n    result = a.compareWith(b);\n  }\n\n  if (b instanceof AnyType) {\n    // Note: This check cannot be moved higher in the scope,\n    // as this would prevent types from being propagated upwards.\n    return 1;\n  }\n  else {\n    return result;\n  }\n}\n","/* @flow */\n\nimport makeError from '../makeError';\nimport compareTypes from '../compareTypes';\n\nimport type TypeContext from '../TypeContext';\n\nimport Validation from '../Validation';\nimport type {ErrorTuple, IdentifierPath} from '../Validation';\n\n/**\n * # Type\n *\n * This is the base class for all types.\n */\nexport default class Type <T> {\n  typeName: string = 'Type';\n  context: TypeContext;\n\n  constructor (context: TypeContext) {\n    this.context = context;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts (input: any): boolean {\n    const validation = new Validation(this.context, input);\n    for (const error of this.errors(validation, [], input)) { // eslint-disable-line no-unused-vars\n      return false;\n    }\n    return true;\n  }\n\n  acceptsType (input: Type<any>): boolean {\n    if (compareTypes(this, input) === -1) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return -1;\n  }\n\n  assert <V: T> (input: V): V {\n    const error = makeError(this, input);\n    if (error) {\n      if (typeof Error.captureStackTrace === 'function') {\n        Error.captureStackTrace(error, this.assert);\n      }\n      throw error;\n    }\n    return input;\n  }\n\n  /**\n   * Get the inner type.\n   */\n  unwrap (): Type<T> {\n    return this;\n  }\n\n  toString () {\n    return '$Type';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class AnyType extends Type<any> {\n  typeName: string = 'AnyType';\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  toString (): string {\n    return 'any';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nconst errorMessages = {\n  ERR_CONSTRAINT_VIOLATION: 'violated a constraint',\n  ERR_EXPECT_ARRAY: 'must be an Array',\n  ERR_EXPECT_TRUE: 'must be true',\n  ERR_EXPECT_FALSE: 'must be false',\n  ERR_EXPECT_BOOLEAN: 'must be true or false',\n  ERR_EXPECT_EMPTY: 'must be empty',\n  ERR_EXPECT_EXACT_VALUE: 'must be exactly $0',\n  ERR_EXPECT_CALLABLE: 'must be callable',\n  ERR_EXPECT_CLASS: 'must be a Class of $0',\n  ERR_EXPECT_FUNCTION: 'must be a function',\n  ERR_EXPECT_GENERATOR: 'must be a generator function',\n  ERR_EXPECT_ITERABLE: 'must be iterable',\n  ERR_EXPECT_ARGUMENT: 'argument \"$0\" must be: $1',\n  ERR_EXPECT_RETURN: 'expected return type of: $0',\n  ERR_EXPECT_N_ARGUMENTS: 'requires $0 argument(s)',\n  ERR_EXPECT_INSTANCEOF: 'must be an instance of $0',\n  ERR_EXPECT_KEY_TYPE: 'keys must be: $0',\n  ERR_EXPECT_NULL: 'must be null',\n  ERR_EXPECT_NUMBER: 'must be a number',\n  ERR_EXPECT_OBJECT: 'must be an object',\n  ERR_EXPECT_PROMISE: 'must be a promise of $0',\n  ERR_EXPECT_STRING: 'must be a string',\n  ERR_EXPECT_SYMBOL: 'must be a symbol',\n  ERR_EXPECT_THIS: 'must be exactly this',\n  ERR_EXPECT_VOID: 'must be undefined',\n  ERR_INVALID_DATE: 'must be a valid date',\n  ERR_MISSING_PROPERTY: 'does not exist on object',\n  ERR_NO_INDEXER: 'is not one of the permitted indexer types',\n  ERR_NO_UNION: 'must be one of: $0',\n  ERR_UNKNOWN_KEY: 'should not contain the key: \"$0\"'\n};\n\nexport type ErrorKey = $Keys<typeof errorMessages>;\n\nexport default errorMessages;\n","/* @flow */\n\nimport errorMessages from './errorMessages';\nimport type {ErrorKey} from './errorMessages';\n\n\nexport default function getErrorMessage (key: ErrorKey, ...params: any[]): string {\n  const message = errorMessages[key];\n  if (params.length > 0) {\n    return message.replace(/\\$(\\d+)/g, (m, i) => String(params[i]));\n  }\n  else {\n    return message;\n  }\n}\n\n\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class TupleType<T> extends Type {\n  typeName: string = 'TupleType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n    for (let i = 0; i < length; i++) {\n      yield* types[i].errors(validation, path.concat(i), input[i]);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    const {context} = this;\n\n    if (!context.checkPredicate('Array', input) || input.length < length) {\n      return false;\n    }\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (!type.accepts(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof TupleType)) {\n      return -1;\n    }\n    const types = this.types;\n    const inputTypes = input.types;\n    if (inputTypes.length < types.length) {\n      return -1;\n    }\n    let isGreater = false;\n    for (let i = 0; i < types.length; i++) {\n      const result = compareTypes(types[i], inputTypes[i]);\n      if (result === 1) {\n        isGreater = true;\n      }\n      else if (result === -1) {\n        return -1;\n      }\n    }\n    if (types.length < inputTypes.length) {\n      return 0;\n    }\n    else if (isGreater) {\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n\n  toString (): string {\n    return `[${this.types.join(', ')}]`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport TupleType from './TupleType';\nimport compareTypes from '../compareTypes';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {\n  inValidationCycle,\n  startValidationCycle,\n  endValidationCycle,\n  inToStringCycle,\n  startToStringCycle,\n  endToStringCycle\n} from '../cyclic';\n\nexport default class ArrayType <T> extends Type {\n  typeName: string = 'ArrayType';\n  elementType: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n    if (validation.inCycle(this, input)) {\n      return;\n    }\n    validation.startCycle(this, input);\n    const {elementType} = this;\n    const {length} = input;\n\n    for (let i = 0; i < length; i++) {\n      yield* elementType.errors(validation, path.concat(i), input[i]);\n    }\n    validation.endCycle(this, input);\n  }\n\n  accepts (input: any): boolean {\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      return false;\n    }\n    if (inValidationCycle(this, input)) {\n      return true;\n    }\n    startValidationCycle(this, input);\n    const {elementType} = this;\n    const {length} = input;\n    for (let i = 0; i < length; i++) {\n      if (!elementType.accepts(input[i])) {\n        endValidationCycle(this, input);\n        return false;\n      }\n    }\n    endValidationCycle(this, input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {elementType} = this;\n    if (input instanceof TupleType) {\n      const {types} = input;\n      for (let i = 0; i < types.length; i++) {\n        const result = compareTypes(elementType, types[i]);\n        if (result === -1) {\n          return -1;\n        }\n      }\n      return 1;\n    }\n    else if (input instanceof ArrayType) {\n      return compareTypes(elementType, input.elementType);\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    const {elementType} = this;\n    if (inToStringCycle(this)) {\n      if (typeof elementType.name === 'string') {\n        return `Array<$Cycle<${elementType.name}>>`;\n      }\n      else {\n        return `Array<$Cycle<Object>>`;\n      }\n    }\n    startToStringCycle(this);\n    const output = `Array<${elementType.toString()}>`;\n    endToStringCycle(this);\n    return output;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      elementType: this.elementType\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class BooleanLiteralType <T: boolean> extends Type {\n  typeName: string = 'BooleanLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== this.value) {\n      yield [path, getErrorMessage(this.value ? 'ERR_EXPECT_TRUE' : 'ERR_EXPECT_FALSE'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof BooleanLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return this.value ? 'true' : 'false';\n  }\n\n  toJSON () {\n    return {\n      type: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport BooleanLiteralType from './BooleanLiteralType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class BooleanType extends Type {\n  typeName: string = 'BooleanType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'boolean') {\n      yield [path, getErrorMessage('ERR_EXPECT_BOOLEAN'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'boolean';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof BooleanLiteralType) {\n      return 1;\n    }\n    else if (input instanceof BooleanType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'boolean';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class EmptyType extends Type {\n  typeName: string = 'EmptyType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield [path, getErrorMessage('ERR_EXPECT_EMPTY'), this];\n  }\n\n  accepts (input: any): boolean {\n    return false; // empty types accepts nothing.\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof EmptyType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'empty';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class ExistentialType extends Type {\n  typeName: string = 'ExistentialType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  toString (): string {\n    return '*';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport FlowIntoType from './FlowIntoType';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nconst FlowIntoSymbol = Symbol('FlowInto');\n\n/**\n * # TypeParameter\n *\n * Type parameters allow polymorphic type safety.\n * The first time a type parameter is checked, it records the shape of its input,\n * this recorded shape is used to check all future inputs for this particular instance.\n */\nexport default class TypeParameter<T> extends Type {\n  typeName: string = 'TypeParameter';\n  id: string;\n  bound: ? Type<T>;\n  default: ? Type<T>;\n\n  recorded: ? Type<T>;\n\n  // @flowIssue 252\n  [FlowIntoSymbol]: ? FlowIntoType = null;\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded, context} = this;\n\n    if (boundOrDefault instanceof FlowIntoType) {\n      // We defer to the other type parameter so that values from this\n      // one can flow \"upwards\".\n      yield* boundOrDefault.errors(validation, path, input);\n      return;\n    }\n    else if (recorded) {\n      // we've already recorded a value for this type parameter\n      yield* recorded.errors(validation, path, input);\n      return;\n    }\n    else if (boundOrDefault) {\n      if (boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType') {\n        return;\n      }\n      else {\n        let hasErrors = false;\n        for (const error of boundOrDefault.errors(validation, path, input)) {\n          hasErrors = true;\n          yield error;\n        }\n        if (hasErrors) {\n          return;\n        }\n      }\n    }\n\n    this.recorded = context.typeOf(input);\n  }\n\n  accepts (input: any): boolean {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded, context} = this;\n    if (boundOrDefault instanceof FlowIntoType) {\n      // We defer to the other type parameter so that values from this\n      // one can flow \"upwards\".\n      return boundOrDefault.accepts(input);\n    }\n    else if (recorded) {\n      return recorded.accepts(input);\n    }\n    else if (boundOrDefault) {\n      if (boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType') {\n        return true;\n      }\n      else if (!boundOrDefault.accepts(input)) {\n        return false;\n      }\n    }\n\n    this.recorded = context.typeOf(input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded} = this;\n    if (input instanceof TypeParameter) {\n      // We don't need to check for `recorded` or `bound` fields\n      // because the input has already been unwrapped, so\n      // if we got a type parameter it must be totally generic and\n      // we treat it like Any.\n      return 1;\n    }\n    else if (recorded) {\n      return compareTypes(recorded, input);\n    }\n    else if (boundOrDefault) {\n      return compareTypes(boundOrDefault, input);\n    }\n    else {\n      // A generic type parameter accepts any input.\n      return 1;\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded} = this;\n    if (recorded) {\n      return recorded.unwrap();\n    }\n    else if (boundOrDefault) {\n      return boundOrDefault.unwrap();\n    }\n    else {\n      return this;\n    }\n  }\n\n  toString (withBinding?: boolean): string {\n    const {id, bound, default: defaultType} = this;\n    if (withBinding) {\n      if (defaultType) {\n        return `${id} = ${defaultType.toString()}`;\n      }\n      else if (bound) {\n        return `${id}: ${bound.toString()}`;\n      }\n    }\n    return id;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      id: this.id,\n      bound: this.bound,\n      recorded: this.recorded\n    };\n  }\n}\n\nexport function flowIntoTypeParameter <T> (typeParameter: TypeParameter<T>): FlowIntoType<T> {\n  const existing: ? FlowIntoType<T> = (typeParameter: $FlowIssue<252>)[FlowIntoSymbol];\n  if (existing) {\n    return existing;\n  }\n\n  const target = new FlowIntoType(typeParameter.context);\n  target.typeParameter = typeParameter;\n  (typeParameter: $FlowIssue<252>)[FlowIntoSymbol] = target;\n  return target;\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameter from './TypeParameter';\n\n/**\n * # FlowIntoType\n *\n * A virtual type which allows types it receives to \"flow\" upwards into a type parameter.\n * The type parameter will become of a union of any types seen by this instance.\n */\nexport default class FlowIntoType<T: any> extends Type {\n  typeName: string = 'FlowIntoType';\n\n  typeParameter: TypeParameter<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      yield* bound.errors(validation, path, input);\n      return;\n    }\n    if (recorded) {\n      // we've already recorded a value for this type parameter\n      if (bound) {\n        let hasError = false;\n        for (const error of bound.errors(validation, path, input)) {\n          yield error;\n          hasError = true;\n        }\n        if (hasError) {\n          return;\n        }\n      }\n      else if (recorded.accepts(input)) {\n        // our existing type already permits this value, there's nothing to do.\n        return;\n      }\n      else {\n        // we need to make a union\n        typeParameter.recorded = context.union(recorded, context.typeOf(input));\n        return;\n      }\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return;\n      }\n      else {\n        let hasError = false;\n        for (const error of bound.errors(validation, path, input)) {\n          yield error;\n          hasError = true;\n        }\n        if (hasError) {\n          return;\n        }\n      }\n    }\n\n    typeParameter.recorded = context.typeOf(input);\n  }\n\n  accepts (input: any): boolean {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      return bound.accepts(input);\n    }\n    if (recorded) {\n      // we've already recorded a value for this type parameter\n      if (bound && !bound.accepts(input)) {\n        return false;\n      }\n      else if (recorded.accepts(input)) {\n        // our existing type already permits this value, there's nothing to do.\n        return true;\n      }\n      else {\n        // we need to make a union\n        typeParameter.recorded = context.union(recorded, context.typeOf(input));\n        return true;\n      }\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return true;\n      }\n      else if (!bound.accepts(input)) {\n        return false;\n      }\n    }\n\n    typeParameter.recorded = context.typeOf(input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      return bound.compareWith(input);\n    }\n    if (recorded) {\n      if (bound && compareTypes(bound, input) === -1) {\n        return -1;\n      }\n      const result = compareTypes(recorded, input);\n      if (result === 0) {\n        // our existing type already permits this value, there's nothing to do.\n        return 0;\n      }\n      // we need to make a union\n      typeParameter.recorded = context.union(recorded, input);\n      return 1;\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return 1;\n      }\n      const result = compareTypes(bound, input);\n      if (result === -1) {\n        return -1;\n      }\n    }\n\n    typeParameter.recorded = input;\n    return 0;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.typeParameter.unwrap();\n  }\n\n  toString (withBinding?: boolean): string {\n    return this.typeParameter.toString(withBinding);\n  }\n\n  toJSON () {\n    return this.typeParameter.toJSON();\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport FunctionTypeParam from './FunctionTypeParam';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class FunctionTypeRestParam<T> extends Type {\n  typeName: string = 'FunctionTypeRestParam';\n  name: string;\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    yield* type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    return type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  toString (): string {\n    const {type} = this;\n    return `...${this.name}: ${type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport FunctionTypeRestParam from './FunctionTypeRestParam';\n\nexport default class FunctionTypeParam<T> extends Type {\n  typeName: string = 'FunctionTypeParam';\n  name: string;\n  optional: boolean;\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {optional, type} = this;\n    if (optional && input === undefined) {\n      return;\n    }\n    else {\n      yield* type.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {optional, type} = this;\n    if (optional && input === undefined) {\n      return true;\n    }\n    else {\n      return type.accepts(input);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  toString (): string {\n    const {optional, type} = this;\n    return `${this.name}${optional ? '?' : ''}: ${type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      optional: this.optional,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class FunctionTypeReturn<T> extends Type {\n  typeName: string = 'FunctionTypeReturn';\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    yield* type.errors(validation, path.concat('[[Return Type]]'), input);\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    return type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeReturn) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  unwrap (): Type<T> {\n    return this.type;\n  }\n\n  toString (): string {\n    const {type} = this;\n    return type.toString();\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nexport const ParentSymbol = Symbol('Parent');\nexport const NameRegistrySymbol = Symbol('NameRegistry');\nexport const ModuleRegistrySymbol = Symbol('ModuleRegistry');\nexport const CurrentModuleSymbol = Symbol('CurrentModule');\nexport const TypeConstructorRegistrySymbol = Symbol('TypeConstructorRegistry');\nexport const InferrerSymbol = Symbol('Inferrer');\nexport const TraverseValueSymbol = Symbol('TraverseValue');\nexport const TraverseTypeSymbol = Symbol('TraverseType');\nexport const TypeSymbol = Symbol('Type');\nexport const TypeParametersSymbol = Symbol('TypeParameters');\nexport const TypePredicateRegistrySymbol = Symbol('TypePredicateRegistry');\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport FunctionTypeParam from './FunctionTypeParam';\nimport FunctionTypeRestParam from './FunctionTypeRestParam';\nimport FunctionTypeReturn from './FunctionTypeReturn';\nimport EmptyType from './EmptyType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {TypeSymbol} from '../symbols';\n\nexport default class FunctionType<P, R> extends Type {\n  typeName: string = 'FunctionType';\n  params: FunctionTypeParam<P>[] = [];\n  rest: ? FunctionTypeRestParam<P>;\n  returnType: FunctionTypeReturn<R>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'function') {\n      yield [path, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n      return;\n    }\n    const annotation = input[TypeSymbol];\n    const {returnType, params} = this;\n    if (annotation) {\n      if (!annotation.params) {\n        return;\n      }\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        const annotationParam = annotation.params[i];\n        if (!annotationParam && !param.optional) {\n          yield [\n            path,\n            getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()),\n            this\n          ];\n        }\n        else if (!param.acceptsType(annotationParam)) {\n          yield [\n            path,\n            getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()),\n            this\n          ];\n        }\n      }\n      if (!returnType.acceptsType(annotation.returnType)) {\n        yield [\n          path,\n          getErrorMessage('ERR_EXPECT_RETURN', returnType.toString()),\n          this\n        ];\n      }\n    }\n    else {\n      const {context} = this;\n      // We cannot safely check an unannotated function.\n      // But we need to propagate `any` type feedback upwards.\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        param.acceptsType(context.any());\n      }\n      returnType.acceptsType(context.any());\n    }\n  }\n\n  accepts (input: any): boolean {\n    if (typeof input !== 'function') {\n      return false;\n    }\n    const {returnType, params} = this;\n    const annotation = input[TypeSymbol];\n    if (annotation) {\n      if (!annotation.params) {\n        return true;\n      }\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        const annotationParam = annotation.params[i];\n        if (!annotationParam && !param.optional) {\n          return false;\n        }\n        else if (!param.acceptsType(annotationParam)) {\n          return false;\n        }\n      }\n      if (!returnType.acceptsType(annotation.returnType)) {\n        return false;\n      }\n      return true;\n    }\n    else {\n      const {context} = this;\n      // We cannot safely check an unannotated function.\n      // But we need to propagate `any` type feedback upwards.\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        param.acceptsType(context.any());\n      }\n      returnType.acceptsType(context.any());\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof FunctionType)) {\n      return -1;\n    }\n    const returnType = this.returnType;\n    const inputReturnType = input.returnType;\n    let isGreater = false;\n    const returnTypeResult = compareTypes(returnType, inputReturnType);\n    if (returnTypeResult === -1) {\n      return -1;\n    }\n    else if (returnTypeResult === 1) {\n      isGreater = true;\n    }\n\n    const params = this.params;\n    const inputParams = input.params;\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const inputParam = i >= inputParams.length ? input.rest : inputParams[i];\n      if (inputParam == null) {\n        return -1;\n      }\n      const result = compareTypes(param, inputParam);\n      if (result === -1) {\n        return -1;\n      }\n      else if (result === 1) {\n        isGreater = true;\n      }\n    }\n    return isGreater ? 1 : 0;\n  }\n\n  acceptsParams (...args: any[]): boolean {\n    const {params, rest} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        if (!param.accepts(args[i])) {\n          return false;\n        }\n      }\n      else if (!param.accepts(undefined)) {\n        return false;\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        if (!rest.accepts(args[i])) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  acceptsReturn (input: any): boolean {\n    return this.returnType.accepts(input);\n  }\n\n  assertParams (...args: any[]): P[] {\n    const {params, rest} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        param.assert(args[i]);\n      }\n      else {\n        param.assert(undefined);\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        rest.assert(args[i]);\n      }\n    }\n\n    return args;\n  }\n\n  assertReturn <T> (input: any): T {\n    this.returnType.assert(input);\n    return input;\n  }\n\n  invoke (...args: Type<P>[]): Type<R> | EmptyType {\n    const {params, rest, context} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        if (!param.acceptsType(args[i])) {\n          return context.empty();\n        }\n      }\n      else if (!param.accepts(undefined)) {\n        return context.empty();\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        if (!rest.acceptsType(args[i])) {\n          return context.empty();\n        }\n      }\n    }\n\n    return this.returnType.type;\n  }\n\n  toString (): string {\n    const {params, rest, returnType} = this;\n    const args = [];\n    for (let i = 0; i < params.length; i++) {\n      args.push(params[i].toString());\n    }\n    if (rest) {\n      args.push(rest.toString());\n    }\n    return `(${args.join(', ')}) => ${returnType.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      params: this.params,\n      rest: this.rest,\n      returnType: this.returnType\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class GeneratorType<Y, R, N> extends Type {\n  typeName: string = 'GeneratorType';\n  yieldType: Type<Y>;\n  returnType: Type<R>;\n  nextType: Type<N>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const isValid = input\n      && typeof input.next === 'function'\n      && typeof input.return === 'function'\n      && typeof input.throw === 'function'\n      ;\n    if (!isValid) {\n      yield [path, getErrorMessage('ERR_EXPECT_GENERATOR'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input\n      && typeof input.next === 'function'\n      && typeof input.return === 'function'\n      && typeof input.throw === 'function'\n      ;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof GeneratorType)) {\n      const result = compareTypes(this.yieldType, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n    let isGreater = false;\n    let result = compareTypes(this.yieldType, input.yieldType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    result = compareTypes(this.returnType, input.returnType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    result = compareTypes(this.nextType, input.nextType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    return isGreater ? 1 : 0;\n  }\n\n  acceptsYield (input: any): boolean {\n    return this.yieldType.accepts(input);\n  }\n\n  acceptsReturn (input: any): boolean {\n    return this.returnType.accepts(input);\n  }\n\n  acceptsNext (input: any): boolean {\n    return this.nextType.accepts(input);\n  }\n\n  assertYield (input: Y): Y {\n    return this.yieldType.assert(input);\n  }\n\n  assertReturn (input: R): R {\n    return this.returnType.assert(input);\n  }\n\n  assertNext (input: N): N {\n    return this.nextType.assert(input);\n  }\n\n  toString (): string {\n    const {yieldType, returnType, nextType} = this;\n    return `Generator<${yieldType.toString()}, ${returnType.toString()}, ${nextType.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      yieldType: this.yieldType,\n      returnType: this.returnType,\n      nextType: this.nextType\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type {ApplicableType} from './';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\n/**\n * # TypeParameterApplication\n *\n */\nexport default class TypeParameterApplication<X, T> extends Type {\n  typeName: string = 'TypeParameterApplication';\n  parent: ApplicableType<T>;\n  typeInstances: Type<X>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {parent, typeInstances} = this;\n    yield* parent.errors(validation, path, input, ...typeInstances);\n  }\n\n  accepts (input: any): boolean {\n    const {parent, typeInstances} = this;\n    return parent.accepts(input, ...typeInstances);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return this.parent.compareWith(input, ...this.typeInstances);\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.parent;\n    if (inner && typeof (inner: $FlowIgnore).hasProperty === 'function') {\n      return (inner: $FlowIgnore).hasProperty(name, ...this.typeInstances);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.parent;\n    if (inner && typeof (inner: $FlowIgnore).getProperty === 'function') {\n      return (inner: $FlowIgnore).getProperty(name, ...this.typeInstances);\n    }\n  }\n\n  unwrap () {\n    return this.parent.unwrap(...this.typeInstances);\n  }\n\n  toString (): string {\n    const {parent, typeInstances} = this;\n    const {name} = parent;\n    if (typeInstances.length) {\n      const items = [];\n      for (let i = 0; i < typeInstances.length; i++) {\n        const typeInstance = typeInstances[i];\n        items.push(typeInstance.toString());\n      }\n      return `${name}<${items.join(', ')}>`;\n    }\n    else {\n      return name;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      typeInstances: this.typeInstances\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport type {Constructor} from './';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nexport default class TypeConstructor<T> extends Type {\n  typeName: string = 'TypeConstructor';\n  name: string;\n  impl: ? Constructor<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts <P> (input: any, ...typeInstances: Type<P>[]): boolean {\n    const {context, name} = this;\n    if (!warnedInstances.has(this)) {\n      context.emitWarningMessage(`TypeConstructor ${name} does not implement accepts().`);\n      warnedInstances.add(this);\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {context, name} = this;\n    if (!warnedInstances.has(this)) {\n      context.emitWarningMessage(`TypeConstructor ${name} does not implement compareWith().`);\n      warnedInstances.add(this);\n    }\n    return -1;\n  }\n\n  inferTypeParameters <P> (input: any): Type<P>[] {\n    return [];\n  }\n\n  apply <P> (...typeInstances: Type<P>[]): TypeParameterApplication<P, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): TypeConstructor<T> {\n    return this;\n  }\n\n  toString (): string {\n    return this.name;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name\n    };\n  }\n\n}\n","/* @flow */\n\nimport TypeConstructor from './TypeConstructor';\n\nimport type Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class GenericType extends TypeConstructor {\n\n  typeName: string = 'GenericType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {name, impl, context} = this;\n    if (!(input instanceof impl)) {\n      const annotation = context.getAnnotation(impl);\n      if (annotation) {\n        yield* annotation.errors(validation, path, input);\n      }\n      else {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', name), this];\n      }\n    }\n  }\n\n  accepts <P> (input: any, ...typeInstances: Type<P>[]): boolean {\n    const {context, impl} = this;\n    if (input instanceof impl) {\n      return true;\n    }\n    const annotation = context.getAnnotation(impl);\n    if (annotation) {\n      return annotation.accepts(input);\n    }\n    else {\n      return false;\n    }\n  }\n\n  compareWith <P> (input: Type<any>, ...typeInstances: Type<P>[]): -1 | 0 | 1 {\n    const {context, impl} = this;\n    const annotation = context.getAnnotation(impl);\n    if (annotation) {\n      const expected = annotation.unwrap(...typeInstances);\n      return compareTypes(input, expected);\n    }\n    else if (input instanceof GenericType && (input.impl === impl || (impl && impl.isPrototypeOf(input.impl)))) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  unwrap <P> (...typeInstances: Type<P>[]) {\n    const {context, impl} = this;\n    if (typeof impl !== 'function') {\n      return this;\n    }\n    const annotation = context.getAnnotation(impl);\n    if (annotation != null) {\n      return (annotation.unwrap(...typeInstances): any);\n    }\n    else {\n      return this;\n    }\n  }\n\n  inferTypeParameters <P> (input: any): Type<P>[] {\n    return [];\n  }\n}","/* @flow */\n\nexport default function invariant (input: any, message: string): void {\n  if (!input) {\n    const error = new Error(message);\n    error.name = 'InvariantViolation';\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(error, invariant);\n    }\n    throw error;\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NullLiteralType extends Type {\n  typeName: string = 'NullLiteralType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== null) {\n      yield [path, getErrorMessage('ERR_EXPECT_NULL'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === null;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NullLiteralType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'null';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class VoidType extends Type {\n  typeName: string = 'VoidType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== undefined) {\n      yield [path, getErrorMessage('ERR_EXPECT_VOID'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === undefined;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof VoidType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'void';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport NullLiteralType from './NullLiteralType';\nimport VoidType from './VoidType';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NullableType<T> extends Type<T> {\n  typeName: string = 'NullableType';\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input != null) {\n      yield* this.type.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    if (input == null) {\n      return true;\n    }\n    else {\n      return this.type.accepts(input);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NullLiteralType || input instanceof VoidType) {\n      return 1;\n    }\n    else if (input instanceof NullableType) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `? ${this.type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport type {\n  Type,\n  TypeConstraint\n} from './types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from './Validation';\n\nexport type ConstrainableType<T> = Type<T> & {constraints: TypeConstraint[]};\n\n/**\n * Add constraints to the given subject type.\n */\nexport function addConstraints (subject: ConstrainableType<any>, ...constraints: TypeConstraint[]) {\n  subject.constraints.push(...constraints);\n}\n\n/**\n * Collect any errors from constraints on the given subject type.\n */\nexport function *collectConstraintErrors (subject: ConstrainableType<any>, validation: Validation<any>, path: IdentifierPath, ...input: any[]): Generator<ErrorTuple, void, void> {\n  const {constraints} = subject;\n  const {length} = constraints;\n  for (let i = 0; i < length; i++) {\n    const constraint = constraints[i];\n    const violation = constraint(...input);\n    if (typeof violation === 'string') {\n      yield [path, violation, this];\n    }\n  }\n}\n\n/**\n * Determine whether the input passes the constraints on the subject type.\n */\nexport function constraintsAccept (subject: ConstrainableType<any>, ...input: any[]): boolean {\n  const {constraints} = subject;\n  const {length} = constraints;\n  for (let i = 0; i < length; i++) {\n    const constraint = constraints[i];\n    if (typeof constraint(...input) === 'string') {\n      return false;\n    }\n  }\n  return true;\n}","/* @flow */\n\nimport Type from './Type';\nimport NullableType from './NullableType';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class ObjectTypeProperty<K: string | number, V> extends Type {\n  typeName: string = 'ObjectTypeProperty';\n  key: K;\n  value: Type<V>;\n  optional: boolean;\n  // @flowIgnore\n  'static': boolean = false;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): ObjectTypeProperty<K, V> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n  \n  /**\n   * Determine whether the property is nullable.\n   */\n  isNullable(): boolean {\n    return this.value instanceof NullableType;\n  }\n  \n  /**\n   * Determine whether the property exists on the given input or its prototype chain.\n   */\n  existsOn(input: Object): boolean {\n    // @flowIgnore\n    const {key, static: isStatic} = this;\n    return key in (isStatic ? input.constructor : input) === true;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIgnore\n    const {optional, key, value, static: isStatic} = this;\n    let target;\n    let targetPath;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n        return;\n      }\n      targetPath = path.concat('constructor');\n      if (typeof input.constructor !== 'function') {\n        if (!optional) {\n          yield [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n        }\n        return;\n      }\n      targetPath.push(key);\n      target = input.constructor[key];\n    }\n    else {\n      target = input[key];\n      targetPath = path.concat(key);\n    }\n    if (optional && target === undefined) {\n      return;\n    }\n    if (this.isNullable() && !this.existsOn(input)) {\n      yield [targetPath, getErrorMessage('ERR_MISSING_PROPERTY'), this];\n      return;\n    }\n    let hasErrors = false;\n    for (const error of value.errors(validation, targetPath, target)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, targetPath, target);\n    }\n  }\n\n  accepts (input: Object): boolean {\n    // @flowIgnore\n    const {optional, key, value, static: isStatic} = this;\n    let target;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        return false;\n      }\n      if (typeof input.constructor !== 'function') {\n        return optional ? true : false;\n      }\n      target = input.constructor[key];\n    }\n    else {\n      target = input[key];\n    }\n    \n    if (optional && target === undefined) {\n      return true;\n    }\n    \n    if (this.isNullable() && !this.existsOn(input)) {\n      return false;\n    }\n    \n    if (!value.accepts(target)) {\n      return false;\n    }\n    else {\n      return constraintsAccept(this, target);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectTypeProperty)) {\n      return -1;\n    }\n    else if (input.key !== this.key) {\n      return -1;\n    }\n    else {\n      return compareTypes(this.value, input.value);\n    }\n  }\n\n  unwrap (): Type<V> {\n    return this.value.unwrap();\n  }\n\n  toString (): string {\n    let key = this.key;\n    // @flowIssue 252\n    if (typeof key === 'symbol') {\n      key = `[${key.toString()}]`;\n    }\n    if (this.static) {\n      return `static ${key}${this.optional ? '?' : ''}: ${this.value.toString()};`;\n    }\n    else {\n      return `${key}${this.optional ? '?' : ''}: ${this.value.toString()};`;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      key: this.key,\n      value: this.value,\n      optional: this.optional\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport ObjectTypeProperty from './ObjectTypeProperty';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ObjectTypeIndexer<K: string | number, V> extends Type {\n  typeName: string = 'ObjectTypeIndexer';\n  id: string;\n  key: Type<K>;\n  value: Type<V>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, key: any, value: any): Generator<ErrorTuple, void, void> {\n    // special case number types\n    if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {\n      key = +key;\n    }\n\n    yield* this.key.errors(validation, path.concat('[[Key]]'), key);\n    yield* this.value.errors(validation, path.concat(key), value);\n  }\n\n  accepts (value: any): boolean {\n    return this.value.accepts(value);\n  }\n\n  acceptsKey (key: any): boolean {\n    // special case number types\n    if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {\n      key = +key;\n    }\n    return this.key.accepts(key);\n  }\n\n  acceptsValue (value: any): boolean {\n    return this.value.accepts(value);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof ObjectTypeProperty) {\n      if (!this.key.accepts(input.key)) {\n        return -1;\n      }\n      else {\n        return compareTypes(this.value, input.value);\n      }\n    }\n    else if (!(input instanceof ObjectTypeIndexer)) {\n      return -1;\n    }\n\n    const keyResult = compareTypes(this.key, input.key);\n    if (keyResult === -1) {\n      return -1;\n    }\n    const valueResult = compareTypes(this.value, input.value);\n    if (valueResult === -1) {\n      return -1;\n    }\n\n    if (keyResult === 0 && valueResult === 0) {\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n\n  unwrap (): Type<V> {\n    return this.value.unwrap();\n  }\n\n  toString (): string {\n    return `[${this.id}: ${this.key.toString()}]: ${this.value.toString()};`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      id: this.id,\n      key: this.key,\n      value: this.value\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ObjectTypeCallProperty<T: Function> extends Type {\n  typeName: string = 'ObjectTypeCallProperty';\n  value: Type<T>;\n  // @flowIgnore\n  'static': boolean = false;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIgnore\n    const {value, static: isStatic} = this;\n\n    let target;\n    let targetPath;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n        return;\n      }\n      targetPath = path.concat('constructor');\n      if (typeof input.constructor !== 'function') {\n        yield [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n        return;\n      }\n      target = input.constructor;\n    }\n    else {\n      target = input;\n      targetPath = path;\n    }\n    yield* value.errors(validation, targetPath, target);\n  }\n\n  accepts (input: any): boolean {\n    // @flowIgnore\n    const {value, static: isStatic} = this;\n    let target;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        return false;\n      }\n      if (typeof input.constructor !== 'function') {\n        return false;\n      }\n      target = input.constructor;\n    }\n    else {\n      target = input;\n    }\n    return value.accepts(target);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectTypeCallProperty)) {\n      return -1;\n    }\n    return compareTypes(this.value, input.value);\n  }\n\n  unwrap (): Type<T> {\n    return this.value.unwrap();\n  }\n\n\n  toString (): string {\n    if (this.static) {\n      return `static ${this.value.toString()};`;\n    }\n    else {\n      return this.value.toString();\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\n\nexport default class Declaration extends Type {\n  name: string;\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport compareTypes from '../compareTypes';\n\nimport type {Type, TypeConstraint} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class VarDeclaration<T> extends Declaration {\n  typeName: string = 'VarDeclaration';\n\n  name: string;\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): VarDeclaration<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `declare var ${this.name}: ${this.type.toString()};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport compareTypes from '../compareTypes';\n\nimport type {\n  Type,\n  TypeAlias,\n  ParameterizedTypeAlias,\n  TypeConstraint,\n  TypeParameterApplication,\n  ObjectTypeProperty\n} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class TypeDeclaration<T> extends Declaration {\n  typeName: string = 'TypeDeclaration';\n\n  get type (): Type<T> {\n    return this.typeAlias.type;\n  }\n\n  typeAlias: TypeAlias<T> | ParameterizedTypeAlias<T>;\n\n  addConstraint (...constraints: TypeConstraint[]): TypeDeclaration<T> {\n    this.typeAlias.addConstraint(...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.typeAlias.errors(validation, path, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    return this.typeAlias.apply(...typeInstances);\n  }\n\n  accepts (input: any): boolean {\n    return this.typeAlias.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.typeAlias, input);\n  }\n\n  hasProperty (name: string, ...typeInstances: Type<any>[]): boolean {\n    return this.typeAlias.hasProperty(name, ...typeInstances);\n  }\n\n  getProperty (name: string, ...typeInstances: Type<any>[]): ? ObjectTypeProperty<any> {\n    return this.typeAlias.getProperty(name, ...typeInstances);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<any> {\n    return this.typeAlias.unwrap(...typeInstances);\n  }\n\n  toString (): string {\n    return `declare ${this.typeAlias.toString(true)};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\nimport type ModuleExportsDeclaration from './ModuleExportsDeclaration';\n\nimport type TypeContext from '../TypeContext';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport type DeclarationDict = {\n  [name: string]: Type<any>;\n};\n\nexport type ModuleDeclarationDict = {\n  [name: string]: ModuleDeclaration;\n};\n\nimport {NameRegistrySymbol, ModuleRegistrySymbol} from '../symbols';\n\nexport default class ModuleDeclaration extends Declaration {\n  typeName: string = 'ModuleDeclaration';\n\n\n  name: string;\n  innerContext: TypeContext;\n  moduleExports: ? ModuleExportsDeclaration<any>;\n\n  get moduleType (): 'commonjs' | 'es6' {\n    if (this.moduleExports) {\n      return 'commonjs';\n    }\n    else {\n      return 'es6';\n    }\n  }\n\n  get isCommonJS (): boolean {\n    return this.moduleExports ? true : false;\n  }\n\n  get isES6 (): boolean {\n    return this.moduleExports ? false : true;\n  }\n\n  get declarations (): DeclarationDict {\n    const {innerContext} = this;\n    return (innerContext: $FlowIssue<252>)[NameRegistrySymbol];\n  }\n\n  get modules (): ModuleDeclarationDict {\n    const {innerContext} = this;\n    return (innerContext: $FlowIssue<252>)[ModuleRegistrySymbol];\n  }\n\n  get (name: string): ? Type<any> {\n    const {moduleExports} = this;\n    if (moduleExports) {\n      const exporting = moduleExports.unwrap();\n      if (typeof exporting.getProperty === 'function') {\n        const prop = exporting.getProperty(name);\n        if (prop) {\n          return prop.unwrap();\n        }\n      }\n    }\n    else {\n      const declaration = this.declarations[name];\n      if (declaration) {\n        return declaration.unwrap();\n      }\n    }\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // Can't validate a module directly.\n    // @todo should this throw?\n  }\n\n  import (moduleName: string): ? ModuleDeclaration {\n    if (/^\\.\\//.test(moduleName)) {\n      moduleName = `${this.name}${moduleName.slice(1)}`;\n    }\n    return this.innerContext.import(moduleName);\n  }\n\n  toString (): string {\n\n    const {name, declarations, modules, moduleExports} = this;\n    const body = [];\n    for (const name in declarations) { // eslint-disable-line guard-for-in\n      const declaration = declarations[name];\n      body.push(declaration.toString(true));\n    }\n    if (modules) {\n      for (const name in modules) { // eslint-disable-line guard-for-in\n        const module = modules[name];\n        body.push(module.toString());\n      }\n    }\n    if (moduleExports) {\n      body.push(moduleExports.toString());\n    }\n    return `declare module \"${name}\" {\\n${indent(body.join('\\n\\n'))}}`;\n  }\n}\n\n\nfunction indent (input: string): string {\n  const lines = input.split('\\n');\n  const {length} = lines;\n  for (let i = 0; i < length; i++) {\n    lines[i] = `  ${lines[i]}`;\n  }\n  return lines.join('\\n');\n}","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ModuleExports<T> extends Declaration {\n  typeName: string = 'ModuleExports';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `declare module.exports: ${this.type.toString()};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport TypeParameterApplication from '../types/TypeParameterApplication';\nimport getErrorMessage from \"../getErrorMessage\";\nimport compareTypes from '../compareTypes';\n\nimport type ParameterizedClassDeclaration from './ParameterizedClassDeclaration';\n\nimport type {Type, ObjectType} from '../types';\n\nimport type {Property} from '../types/ObjectType';\n\nimport type Validation, {IdentifierPath, ErrorTuple} from '../Validation';\n\nexport default class ClassDeclaration<O: {}> extends Declaration {\n  typeName: string = 'ClassDeclaration';\n\n  name: string;\n  superClass: ? Type<any>;\n  body: ObjectType<O>;\n\n  shapeID: Symbol = Symbol();\n\n  get properties (): Array<*> {\n    const {body, superClass} = this;\n    if (superClass == null) {\n      return body.properties;\n    }\n    const bodyProps = body.properties;\n    const superProps = (superClass.unwrap(): $FlowFixme).properties;\n    const seen = {};\n    const seenStatic = {};\n    const props = [];\n    for (let i = 0; i < superProps.length; i++) {\n      const prop = superProps[i];\n      props.push(prop);\n      if (prop.static) {\n        seenStatic[prop.key] = i;\n      }\n      else {\n        seen[prop.key] = i;\n      }\n    }\n    for (let i = 0; i < bodyProps.length; i++) {\n      const prop = bodyProps[i];\n      if (seen[prop.key]) {\n        props[i] = prop;\n      }\n      else {\n        props.push(prop);\n      }\n    }\n    return props;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {body} = this;\n    const superClass = this.superClass && this.superClass.unwrap();\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', this.name), this];\n      return;\n    }\n    if (superClass) {\n      for (const [errorPath, errorMessage, expectedType] of superClass.errors(validation, path, input)) {\n        const propertyName = errorPath[path.length];\n        if (body.getProperty(propertyName)) {\n          continue;\n        }\n        else {\n          yield [errorPath, errorMessage, expectedType];\n        }\n      }\n    }\n    yield* body.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    const {body} = this;\n    const superClass = this.superClass && this.superClass.unwrap();\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    else if (superClass && !superClass.accepts(input)) {\n      return false;\n    }\n    else if (!body.accepts(input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof ClassDeclaration) {\n      if (input === this) {\n        return 0;\n      }\n      else if (this.isSuperClassOf(input)) {\n        return 1;\n      }\n      else {\n        return -1;\n      }\n    }\n    return compareTypes(this.body, input);\n  }\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty (key: string | number): ? Property<$Keys<O>, any> {\n    const {body, superClass} = this;\n    const prop = body.getProperty(key);\n    if (prop) {\n      return prop;\n    }\n    else if (superClass && typeof superClass.getProperty === 'function') {\n      return superClass.getProperty(key);\n    }\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {body, superClass} = this;\n    if (body.hasProperty(key)) {\n      return true;\n    }\n    else if (superClass && typeof superClass.hasProperty === 'function') {\n      return superClass.hasProperty(key);\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Determine whether this class declaration represents a super class of\n   * the given type.\n   */\n  isSuperClassOf <X: {}> (candidate: ClassDeclaration<X> | ParameterizedClassDeclaration<*, X>) {\n    const {body, shapeID} = this;\n    let current = candidate;\n\n    while (current != null) {\n      if (current === this || current === body || current.shapeID === shapeID) {\n        return true;\n      }\n      if (current instanceof ClassDeclaration) {\n        current = current.superClass;\n      }\n      else {\n        current = current.unwrap();\n      }\n    }\n    return false;\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, O> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  toString (withDeclaration?: boolean) {\n    const {name, superClass, body} = this;\n    if (withDeclaration) {\n      const superClassName = superClass && ((typeof superClass.name === 'string' && superClass.name) || superClass.toString());\n      return `declare class ${name}${superClassName ? ` extends ${superClassName}` : ''} ${body.toString()}`;\n    }\n    else {\n      return name;\n    }\n  }\n}\n","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameter from './TypeParameter';\nimport TypeParameterApplication from './TypeParameterApplication';\n\nimport {collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class PartialType<X, T> extends Type {\n  typeName: string = 'PartialType';\n  name: string;\n  type: Type<T>;\n  typeParameters: TypeParameter<X>[] = [];\n  constraints: ? TypeConstraint[];\n\n  typeParameter (id: string, bound?: Type<X>, defaultType?: Type<X>): TypeParameter<X> {\n    const target = new TypeParameter(this.context);\n    target.id = id;\n    target.bound = bound;\n    target.default = defaultType;\n    this.typeParameters.push(target);\n    return target;\n  }\n\n  apply (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {constraints, type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors && constraints) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {constraints, type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (constraints && !constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0;\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  toString (expand?: boolean): string {\n    const {type} = this;\n    return type.toString(expand);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      typeParameters: this.typeParameters,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport PartialType from '../types/PartialType';\nimport TypeParameterApplication from '../types/TypeParameterApplication';\nimport type {Type, TypeParameter} from '../types';\nimport type {Property} from '../types/ObjectType';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type {ClassBodyCreator} from './';\n\n\n\nexport default class ParameterizedClassDeclaration<X, O: Object> extends Declaration {\n  typeName: string = 'ParameterizedClassDeclaration';\n  bodyCreator: ClassBodyCreator<X, O>;\n  name: string;\n\n  shapeID: Symbol = Symbol();\n\n  get superClass (): ? Type<$Supertype<O>> {\n    return getPartial(this).type.superClass;\n  }\n\n  get body (): ? Type<O> {\n    return getPartial(this).type.body;\n  }\n\n  get properties(): Property<*, *>[] {\n    return getPartial(this).type.properties;\n  }\n\n  get typeParameters (): TypeParameter<X>[] {\n    return getPartial(this).typeParameters;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    return getPartial(this, ...typeInstances).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return getPartial(this).compareWith(input);\n  }\n\n  unwrap (...typeInstances: Type<any>[]): Type<O> {\n    return getPartial(this, ...typeInstances).type;\n  }\n\n  isSuperClassOf (candidate: *) {\n    return getPartial(this).type.isSuperClassOf(candidate);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, O> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  toString (withDeclaration?: boolean) {\n    if (!withDeclaration) {\n      return this.name;\n    }\n    const partial = getPartial(this);\n    const {type, typeParameters} = partial;\n    if (typeParameters.length === 0) {\n      return partial.toString(true);\n    }\n    const items = [];\n    for (let i = 0; i < typeParameters.length; i++) {\n      const typeParameter = typeParameters[i];\n      items.push(typeParameter.toString(true));\n    }\n    const {superClass, body} = type;\n    const superClassName = superClass && ((typeof superClass.name === 'string' && superClass.name) || superClass.toString());\n    return `declare class ${this.name}<${items.join(', ')}>${superClassName ? ` extends ${superClassName}` : ''} ${body.toString()}`;\n  }\n\n  toJSON () {\n    return getPartial(this).toJSON();\n  }\n}\n\nfunction getPartial <X, O: Object> (parent: ParameterizedClassDeclaration<X, O>, ...typeInstances: Type<any>[]): PartialType<O> {\n\n  const {context, bodyCreator} = parent;\n  const partial = new PartialType(context);\n  const body = bodyCreator(partial);\n  if (Array.isArray(body)) {\n    partial.type = context.class(parent.name, ...body);\n  }\n  else {\n    partial.type = context.class(parent.name, body);\n  }\n\n  (partial.type: $FlowFixme).shapeID = parent.shapeID;\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n\n","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\n\nimport type Validation, {IdentifierPath, ErrorTuple} from '../Validation';\n\nexport default class ExtendsDeclaration<T> extends Declaration {\n  typeName: string = 'ExtendsDeclaration';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (withDeclaration?: boolean) {\n    const {type} = this;\n    if (withDeclaration) {\n      return `extends ${type.toString()}`;\n    }\n    else {\n      return type.toString();\n    }\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport ObjectTypeProperty from './ObjectTypeProperty';\nimport ObjectTypeIndexer from './ObjectTypeIndexer';\nimport ObjectTypeCallProperty from './ObjectTypeCallProperty';\n\nimport {ClassDeclaration, ParameterizedClassDeclaration} from '../declarations';\n\nexport type Property<K: string | number, V>\n = ObjectTypeProperty<K, V>\n | ObjectTypeIndexer<K, V>\n ;\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {\n  inValidationCycle,\n  startValidationCycle,\n  endValidationCycle,\n  inToStringCycle,\n  startToStringCycle,\n  endToStringCycle\n} from '../cyclic';\n\n\nexport default class ObjectType<T: {}> extends Type {\n  typeName: string = 'ObjectType';\n  properties: ObjectTypeProperty<$Keys<T>, any>[] = [];\n  indexers: ObjectTypeIndexer<any, any>[] = [];\n  callProperties: ObjectTypeCallProperty<any>[] = [];\n  exact: boolean = false;\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty (key: string | number): ? Property<$Keys<T>, any> {\n    const {properties} = this;\n    const {length} = properties;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        return property;\n      }\n    }\n    return this.getIndexer(key);\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {properties} = this;\n    const {length} = properties;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        return true;\n      }\n    }\n    return this.hasIndexer(key);\n  }\n\n\n  /**\n   * Get an indexer with which matches the given key type.\n   */\n  getIndexer <K: string | number> (key: K): ? ObjectTypeIndexer<K, any> {\n    const {indexers} = this;\n    const {length} = indexers;\n    for (let i = 0; i < length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key)) {\n        return indexer;\n      }\n    }\n  }\n\n  /**\n   * Determine whether an indexer exists which matches the given key type.\n   */\n  hasIndexer (key: string | number): boolean {\n    const {indexers} = this;\n    const {length} = indexers;\n    for (let i = 0; i < length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input === null) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    const hasCallProperties = this.callProperties.length > 0;\n\n    if (hasCallProperties) {\n      if (!acceptsCallProperties(this, input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_CALLABLE'), this];\n      }\n    }\n    else if (typeof input !== 'object') {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    if (validation.inCycle(this, input)) {\n      return;\n    }\n    validation.startCycle(this, input);\n\n\n    if (this.indexers.length > 0) {\n      yield* collectErrorsWithIndexers(this, validation, path, input);\n    }\n    else if (this.exact) {\n      yield* collectErrorsExact(this, validation, path, input);\n    }\n    else {\n      yield* collectErrorsWithoutIndexers(this, validation, path, input);\n    }\n    validation.endCycle(this, input);\n  }\n\n  accepts (input: any): boolean {\n    if (input === null) {\n      return false;\n    }\n    const hasCallProperties = this.callProperties.length > 0;\n\n    if (hasCallProperties) {\n      if (!acceptsCallProperties(this, input)) {\n        return false;\n      }\n    }\n    else if (typeof input !== 'object') {\n      return false;\n    }\n    if (inValidationCycle(this, input)) {\n      return true;\n    }\n    startValidationCycle(this, input);\n\n    let result;\n    if (this.indexers.length > 0) {\n      result = acceptsWithIndexers(this, input);\n    }\n    else if (this.exact) {\n      result = acceptsExact(this, input);\n    }\n    else {\n      result = acceptsWithoutIndexers(this, input);\n    }\n    endValidationCycle(this, input);\n    return result;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectType || input instanceof ClassDeclaration || input instanceof ParameterizedClassDeclaration)) {\n      return -1;\n    }\n    const hasCallProperties = this.callProperties.length > 0;\n\n    let isGreater = false;\n    if (hasCallProperties) {\n      const result = compareTypeCallProperties(this, (input: $FlowFixme));\n      if (result === -1) {\n        return -1;\n      }\n      else if (result === 1) {\n        isGreater = true;\n      }\n    }\n\n    let result;\n    if (this.indexers.length > 0) {\n      result = compareTypeWithIndexers(this, (input: $FlowFixme));\n    }\n    else {\n      result = compareTypeWithoutIndexers(this, (input: $FlowFixme));\n    }\n\n    if (result === -1) {\n      return -1;\n    }\n    else if (isGreater) {\n      return 1;\n    }\n    else {\n      return result;\n    }\n  }\n\n  toString (): string {\n    const {callProperties, properties, indexers} = this;\n    if (inToStringCycle(this)) {\n      return '$Cycle<Object>';\n    }\n    startToStringCycle(this);\n    const body = [];\n    for (let i = 0; i < callProperties.length; i++) {\n      body.push(callProperties[i].toString());\n    }\n    for (let i = 0; i < properties.length; i++) {\n      body.push(properties[i].toString());\n    }\n    for (let i = 0; i < indexers.length; i++) {\n      body.push(indexers[i].toString());\n    }\n    endToStringCycle(this);\n    if (this.exact) {\n      return `{|\\n${indent(body.join('\\n'))}\\n|}`;\n    }\n    else {\n      return `{\\n${indent(body.join('\\n'))}\\n}`;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      callProperties: this.callProperties,\n      properties: this.properties,\n      indexers: this.indexers,\n      exact: this.exact\n    };\n  }\n}\n\nfunction acceptsCallProperties (type: ObjectType<any>, input: any): boolean {\n  const {callProperties} = type;\n  for (let i = 0; i < callProperties.length; i++) {\n    const callProperty = callProperties[i];\n    if (callProperty.accepts(input)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\nfunction compareTypeCallProperties (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {callProperties} = type;\n  const inputCallProperties = input.callProperties;\n  let identicalCount = 0;\n  loop: for (let i = 0; i < callProperties.length; i++) {\n    const callProperty = callProperties[i];\n\n    for (let j = 0; j < inputCallProperties.length; j++) {\n      const inputCallProperty = inputCallProperties[j];\n      const result = compareTypes(callProperty, inputCallProperty);\n      if (result === 0) {\n        identicalCount++;\n        continue loop;\n      }\n      else if (result === 1) {\n        continue loop;\n      }\n    }\n    // If we got this far, nothing accepted.\n    return -1;\n  }\n  if (identicalCount === callProperties.length) {\n    return 0;\n  }\n  else {\n    return 1;\n  }\n}\n\nfunction acceptsWithIndexers (type: ObjectType<any>, input: Object): boolean {\n  const {properties, indexers} = type;\n  const seen = [];\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (!property.accepts(input)) {\n      return false;\n    }\n    seen.push(property.key);\n  }\n  loop: for (const key in input) {\n    if (seen.indexOf(key) !== -1) {\n      continue;\n    }\n    const value = input[key];\n    for (let i = 0; i < indexers.length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {\n        continue loop;\n      }\n    }\n\n    // if we got this far the key / value did not accepts any indexers.\n    return false;\n  }\n  return true;\n}\n\nfunction compareTypeWithIndexers (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {indexers, properties} = type;\n  const inputIndexers = input.indexers;\n  const inputProperties = input.properties;\n  let isGreater = false;\n  loop: for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    for (let j = 0; j < inputProperties.length; j++) {\n      const inputProperty = inputProperties[j];\n      if (inputProperty.key === property.key) {\n        const result = compareTypes(property, inputProperty);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 1) {\n          isGreater = true;\n        }\n        continue loop;\n      }\n    }\n  }\n  loop: for (let i = 0; i < indexers.length; i++) {\n    const indexer = indexers[i];\n    for (let j = 0; j < inputIndexers.length; j++) {\n      const inputIndexer = inputIndexers[j];\n      const result = compareTypes(indexer, inputIndexer);\n      if (result === 1) {\n        isGreater = true;\n        continue loop;\n      }\n      else if (result === 0) {\n        continue loop;\n      }\n    }\n    // if we got this far, nothing accepted\n    return -1;\n  }\n  return isGreater ? 1 : 0;\n}\n\n\nfunction acceptsWithoutIndexers (type: ObjectType<any>, input: Object): boolean {\n  const {properties} = type;\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (!property.accepts(input)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\nfunction acceptsExact (type: ObjectType<any>, input: Object): boolean {\n  const {properties} = type;\n  const {length} = properties;\n  loop: for (const key in input) { // eslint-disable-line guard-for-in\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        if (!property.accepts(input)) {\n          return false;\n        }\n        continue loop;\n      }\n    }\n    // if we got this far the property does not exist in the object.\n    return false;\n  }\n  return true;\n}\n\nfunction compareTypeWithoutIndexers (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {properties} = type;\n  const inputProperties = input.properties;\n  let isGreater = false;\n  loop: for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    for (let j = 0; j < inputProperties.length; j++) {\n      const inputProperty = inputProperties[j];\n      if (inputProperty.key === property.key) {\n        const result = compareTypes(property.value, inputProperty.value);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 1) {\n          isGreater = true;\n        }\n        continue loop;\n      }\n    }\n    return -1;\n  }\n  return isGreater ? 1 : 0;\n}\n\n\nfunction *collectErrorsWithIndexers (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties, indexers} = type;\n  const seen = [];\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    yield* property.errors(validation, path, input);\n    seen.push(property.key);\n  }\n  loop: for (const key in input) {\n    if (seen.indexOf(key) !== -1) {\n      continue;\n    }\n    const value = input[key];\n    for (let i = 0; i < indexers.length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {\n        continue loop;\n      }\n    }\n\n    // if we got this far the key / value was not accepted by any indexers.\n    yield [path.concat(key), getErrorMessage('ERR_NO_INDEXER'), type];\n  }\n}\n\n\nfunction *collectErrorsWithoutIndexers (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties} = type;\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    yield* property.errors(validation, path, input);\n  }\n}\n\n\nfunction *collectErrorsExact (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties} = type;\n  const {length} = properties;\n  loop: for (const key in input) { // eslint-disable-line guard-for-in\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        yield* property.errors(validation, path, input);\n        continue loop;\n      }\n    }\n    // if we got this far the property does not exist in the object.\n    yield [path, getErrorMessage('ERR_UNKNOWN_KEY', key), type];\n  }\n}\n\nfunction indent (input: string): string {\n  const lines = input.split('\\n');\n  const {length} = lines;\n  for (let i = 0; i < length; i++) {\n    lines[i] = `  ${lines[i]}`;\n  }\n  return lines.join('\\n');\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport invariant from '../invariant';\n\nimport ObjectType from './ObjectType';\nimport type {Property} from './ObjectType';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class IntersectionType<T: {}> extends Type {\n  typeName: string = 'IntersectionType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      yield* types[i].errors(validation, path, input);\n    }\n  }\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty <K: string | number> (key: K): ? Property<K, any> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = length - 1; i >= 0; i--) {\n      const type = types[i];\n      if (typeof type.getProperty === 'function') {\n        const prop = type.getProperty(key);\n        if (prop) {\n          return prop;\n        }\n      }\n    }\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (typeof type.hasProperty === 'function' && type.hasProperty(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (!type.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const types = this.types;\n    let identicalCount = 0;\n    if (input instanceof IntersectionType) {\n      const inputTypes = input.types;\n      loop: for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        for (let j = 0; j < inputTypes.length; j++) {\n          const result = compareTypes(type, inputTypes[i]);\n          if (result === 0) {\n            identicalCount++;\n            continue loop;\n          }\n          else if (result === 1) {\n            continue loop;\n          }\n        }\n        // if we got this far then nothing accepted this type.\n        return -1;\n      }\n      return identicalCount === types.length ? 0 : 1;\n    }\n    else {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        const result = compareTypes(type, input);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 0) {\n          identicalCount++;\n        }\n      }\n      return identicalCount === types.length ? 0 : 1;\n    }\n  }\n\n  unwrap (): ObjectType<T> {\n    const callProperties = [];\n    const properties = [];\n    const indexers = [];\n    const {types, context} = this;\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i].unwrap();\n      invariant(type instanceof ObjectType, 'Can only intersect object types');\n      callProperties.push(...type.callProperties);\n      indexers.push(...type.indexers);\n      mergeProperties(properties, type.properties);\n    }\n    return (context: any).object(\n      ...callProperties,\n      ...properties,\n      ...indexers\n    );\n  }\n\n  toString (): string {\n    return this.types.join(' & ');\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}\n\nfunction getPropertyIndex <K: string | number, V> (name: K, properties: ObjectTypeProperty<*, V>[]): number {\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction mergeProperties <K: string | number, V> (target: ObjectTypeProperty<K, V>[], source: ObjectTypeProperty<K, V>[]): ObjectTypeProperty<K, V>[] {\n  for (let i = 0; i < source.length; i++) {\n    const typeProp = source[i];\n    const index = getPropertyIndex(typeProp.key, target);\n    if (index === -1) {\n      target.push(typeProp);\n    }\n    else {\n      target[index] = typeProp;\n    }\n  }\n  return target;\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class MixedType extends Type {\n  typeName: string = 'MixedType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  toString (): string {\n    return 'mixed';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class TypeAlias<T> extends Type {\n  typeName: string = 'TypeAlias';\n  name: string;\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): TypeAlias<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  get properties () {\n    return this.type.properties;\n  }\n\n  get hasConstraints (): boolean {\n    return this.constraints.length > 0;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0; // should never need this because it's taken care of by compareTypes.\n    }\n    else if (this.hasConstraints) {\n      // if we have constraints the types cannot be the same\n      return -1;\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (withDeclaration?: boolean): string {\n    const {name, type} = this;\n    if (withDeclaration) {\n      return `type ${name} = ${type.toString()};`;\n    }\n    else {\n      return name;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NumericLiteralType<T: number> extends Type {\n  typeName: string = 'NumericLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', value), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NumericLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return `${this.value}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport NumericLiteralType from './NumericLiteralType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NumberType extends Type {\n  typeName: string = 'NumberType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'number') {\n      yield [path, getErrorMessage('ERR_EXPECT_NUMBER'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'number';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NumberType) {\n      return 0;\n    }\n    else if (input instanceof NumericLiteralType) {\n      return 1;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'number';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeCreator} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport TypeAlias from './TypeAlias';\nimport PartialType from './PartialType';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport {constraintsAccept} from '../typeConstraints';\n\n\nexport default class ParameterizedTypeAlias <T: Type> extends TypeAlias {\n  typeName: string = 'ParameterizedTypeAlias';\n\n  typeCreator: TypeCreator<T>;\n\n  get properties () {\n    return getPartial(this).type.properties;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    const partial = getPartial(this, ...typeInstances);\n    if (!partial.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0; // should never need this because it's taken care of by compareTypes.\n    }\n    else if (this.hasConstraints) {\n      // if we have constraints the types cannot be the same\n      return -1;\n    }\n    else {\n      return compareTypes(getPartial(this), input);\n    }\n  }\n\n  hasProperty (name: string, ...typeInstances: Type<any>[]): boolean {\n    const inner = this.unwrap(...typeInstances);\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name, ...typeInstances);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string, ...typeInstances: Type<any>[]): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap(...typeInstances);\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name, ...typeInstances);\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<any> {\n    return getPartial(this, ...typeInstances).unwrap();\n  }\n\n  toString (withDeclaration?: boolean): string {\n    const partial = getPartial(this);\n    const {typeParameters} = partial;\n    const items = [];\n    for (let i = 0; i < typeParameters.length; i++) {\n      const typeParameter = typeParameters[i];\n      items.push(typeParameter.toString(true));\n    }\n\n    const {name} = this;\n    const identifier = typeParameters.length > 0\n                     ? `${name}<${items.join(', ')}>`\n                     : name\n                     ;\n\n    if (withDeclaration) {\n      return `type ${identifier} = ${partial.toString()};`;\n    }\n    else {\n      return identifier;\n    }\n  }\n\n  toJSON () {\n    const partial = getPartial(this);\n    return partial.toJSON();\n  }\n}\n\nfunction getPartial <T> (parent: ParameterizedTypeAlias<T>, ...typeInstances: Type<any>[]): PartialType<T> {\n\n  const {typeCreator, context, name} = parent;\n  const partial = new PartialType(context);\n  partial.name = name;\n  partial.type = typeCreator(partial);\n  partial.constraints = parent.constraints;\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport PartialType from './PartialType';\nimport type FunctionTypeParam from './FunctionTypeParam';\nimport type FunctionTypeRestParam from './FunctionTypeRestParam';\nimport type FunctionTypeReturn from './FunctionTypeReturn';\nimport type TypeParameter from './TypeParameter';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport type FunctionBodyCreator <P, R> = (partial: PartialType<(...params: P[]) => R>) => Array<FunctionTypeParam<P> | FunctionTypeRestParam<P> | FunctionTypeReturn<R>>;\n\n\nexport default class ParameterizedFunctionType <X, P: any, R: any> extends Type {\n  typeName: string = 'ParameterizedFunctionType';\n  bodyCreator: FunctionBodyCreator<P, R>;\n\n  get typeParameters (): TypeParameter<X>[] {\n    return getPartial(this).typeParameters;\n  }\n\n  get params (): FunctionTypeParam<P>[] {\n    return getPartial(this).type.params;\n  }\n\n  get rest (): ? FunctionTypeRestParam<P> {\n    return getPartial(this).type.rest;\n  }\n\n  get returnType (): Type<R> {\n    return getPartial(this).type.returnType;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    return getPartial(this, ...typeInstances).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(getPartial(this), input);\n  }\n\n  acceptsParams (...args: any[]): boolean {\n    return getPartial(this).type.acceptsParams(...args);\n  }\n\n  acceptsReturn (input: any): boolean {\n    return getPartial(this).type.acceptsReturn(input);\n  }\n\n  assertParams <T> (...args: T[]): T[] {\n    return getPartial(this).type.assertParams(...args);\n  }\n\n  assertReturn <T> (input: T): T {\n    return getPartial(this).type.assertReturn(input);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<(...params: P[]) => R | any> {\n    return getPartial(this, ...typeInstances).unwrap();\n  }\n\n  toString (): string {\n    const partial = getPartial(this);\n    const {type, typeParameters} = partial;\n    if (typeParameters.length === 0) {\n      return type.toString();\n    }\n    const items = [];\n    for (let i = 0; i < typeParameters.length; i++) {\n      const typeParameter = typeParameters[i];\n      items.push(typeParameter.toString(true));\n    }\n    return `<${items.join(', ')}> ${type.toString()}`;\n  }\n\n  toJSON () {\n    const partial = getPartial(this);\n    return partial.toJSON();\n  }\n}\n\nfunction getPartial <X, P, R> (parent: ParameterizedFunctionType<X, P, R>, ...typeInstances: Type<any>[]): PartialType<(...params: P[]) => R> {\n\n  const {context, bodyCreator} = parent;\n  const partial = new PartialType(context);\n  const body = bodyCreator(partial);\n  partial.type = context.function(...body);\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n","\nimport Type from './Type';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class RefinementType<T> extends Type {\n  typeName: string = 'RefinementType';\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): RefinementType<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (): string {\n    const {type} = this;\n    return `$Refinment<${type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class StringLiteralType<T: string> extends Type {\n  typeName: string = 'StringLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof StringLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return JSON.stringify(this.value);\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport StringLiteralType from './StringLiteralType';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class StringType extends Type {\n  typeName: string = 'StringType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'string') {\n      yield [path, getErrorMessage('ERR_EXPECT_STRING'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'string';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof StringLiteralType) {\n      return 1;\n    }\n    else if (input instanceof StringType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'string';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from '../getErrorMessage';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class SymbolLiteralType<T: Symbol> extends Type {\n  typeName: string = 'SymbolLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof SymbolLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return `typeof ${String(this.value)}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport SymbolLiteralType from './SymbolLiteralType';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class SymbolType extends Type {\n  typeName: string = 'SymbolType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIssue 252\n    if (typeof input !== 'symbol') {\n      yield [path, getErrorMessage('ERR_EXPECT_SYMBOL'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'symbol';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof SymbolLiteralType) {\n      return 1;\n    }\n    else if (input instanceof SymbolType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'Symbol';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport getErrorMessage from \"../getErrorMessage\";\n\n\n/**\n * # ThisType\n * Captures a reference to a particular instance of a class or a value,\n * and uses that value to perform an identity check.\n * In the case that `this` is undefined, any value will be permitted.\n */\nexport default class ThisType<T> extends Type {\n  typeName: string = 'ThisType';\n\n  recorded: ? T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {recorded} = this;\n    if (input === recorded) {\n      return;\n    }\n    else if (typeof recorded === 'function' && input instanceof recorded) {\n      return;\n    }\n    else if (recorded != null) {\n      yield [path, getErrorMessage('ERR_EXPECT_THIS'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {recorded} = this;\n    if (input === recorded) {\n      return true;\n    }\n    else if (typeof recorded === 'function' && input instanceof recorded) {\n      return true;\n    }\n    else if (recorded != null) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ThisType)) {\n      return -1;\n    }\n    else if (input.recorded && this.recorded) {\n      return input.recorded === this.recorded ? 0 : -1;\n    }\n    else if (this.recorded) {\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n\n  /**\n   * Get the inner type.\n   */\n  unwrap (): Type<T> {\n    return this;\n  }\n\n  toString (withBinding?: boolean): string {\n    return 'this';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeRevealer} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nexport default class TypeBox<T: any> extends Type {\n  typeName: string = 'TypeBox';\n\n  reveal: TypeRevealer<T>;\n\n  get name (): ? string {\n    return (this.type: any).name;\n  }\n\n  get type (): Type<T> {\n    const {reveal} = this;\n    const type = reveal();\n    if (!type) {\n      if (!warnedInstances.has(this)) {\n        this.context.emitWarningMessage('Failed to reveal boxed type.');\n        warnedInstances.add(this);\n      }\n      return this.context.mixed();\n    }\n    else if (!(type instanceof Type)) {\n      // we got a boxed reference to something like a class\n      return this.context.ref(type);\n    }\n    return type;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this.type;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return this.type.toString();\n  }\n\n  toJSON () {\n    return this.type.toJSON();\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport compareTypes from '../compareTypes';\n\nconst warnedMissing = {};\n\nexport default class TypeReference<T: any> extends Type {\n  typeName: string = 'TypeReference';\n  name: string;\n\n  get type (): Type<T> {\n    const {context, name} = this;\n    const type = context.get(name);\n    if (!type) {\n      if (!warnedMissing[name]) {\n        context.emitWarningMessage(`Cannot resolve type: ${name}`);\n        warnedMissing[name] = true;\n      }\n      return (context.any(): any);\n    }\n    return type;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return (this.type.unwrap(): any);\n  }\n\n  toString (): string {\n    return this.name;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeRevealer} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nconst RevealedName = Symbol('RevealedName');\nconst RevealedValue = Symbol('RevealedValue');\n\nexport default class TypeTDZ<T: any> extends Type {\n  typeName: string = 'TypeTDZ';\n\n  reveal: TypeRevealer<T>;\n\n  // @flowIssue 252\n  [RevealedName]: ? string = undefined;\n\n  // @flowIssue 252\n  [RevealedValue]: ? Type<T> = undefined;\n\n  get name (): ? string {\n    let name = (this: any)[RevealedName];\n    if (!name) {\n      name = (getRevealed(this): any).name;\n    }\n    return name;\n  }\n\n  set name (value: string) {\n    (this: any)[RevealedName] = value;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* getRevealed(this).errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return getRevealed(this).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(getRevealed(this), input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = getRevealed(this);\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return getRevealed(this).unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (): string {\n    return getRevealed(this).toString();\n  }\n\n  toJSON () {\n    return getRevealed(this).toJSON();\n  }\n}\n\nfunction getRevealed <T: any> (container: TypeTDZ<T>): Type<T> {\n  const existing = (container: $FlowIssue<252>)[RevealedValue];\n  if (existing) {\n    return existing;\n  }\n  else {\n    const {reveal} = container;\n    const type = reveal();\n    if (!type) {\n      if (!warnedInstances.has(container)) {\n        const name = (container: any)[RevealedName];\n        if (name) {\n          container.context.emitWarningMessage(`Failed to reveal type called \"${name}\" in Temporal Dead Zone.`);\n        }\n        else {\n          container.context.emitWarningMessage('Failed to reveal unknown type in Temporal Dead Zone.');\n        }\n        warnedInstances.add(container);\n      }\n      return container.context.mixed();\n    }\n    else if (!(type instanceof Type)) {\n      // we got a boxed reference to something like a class\n      return container.context.ref(type);\n    }\n    return type;\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport compareTypes from '../compareTypes';\n\nexport default class UnionType<T> extends Type {\n  typeName: string = 'UnionType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (type.accepts(input)) {\n        return;\n      }\n    }\n    yield [path, getErrorMessage('ERR_NO_UNION', this.toString()), this];\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (type.accepts(input)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const types = this.types;\n    if (input instanceof UnionType) {\n      const inputTypes = input.types;\n      let identicalCount = 0;\n      loop: for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        for (let j = 0; j < inputTypes.length; j++) {\n          const result = compareTypes(type, inputTypes[i]);\n          if (result === 0) {\n            identicalCount++;\n            continue loop;\n          }\n          else if (result === 1) {\n            continue loop;\n          }\n        }\n        // if we got this far then nothing accepted this type.\n        return -1;\n      }\n\n      if (identicalCount === types.length) {\n        return 0;\n      }\n      else {\n        return 1;\n      }\n    }\n    else {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (compareTypes(type, input) >= 0) {\n          return 1;\n        }\n      }\n      return -1;\n    }\n  }\n\n  toString (): string {\n    const {types} = this;\n    const normalized = new Array(types.length);\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      if (type.typeName === 'FunctionType' || type.typeName === 'ParameterizedFunctionType') {\n        normalized[i] = `(${type.toString()})`;\n      }\n      else {\n        normalized[i] = type.toString();\n      }\n    }\n    return normalized.join(' | ');\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}","/* @flow */\n\nimport primitiveTypes from './primitiveTypes';\n\nimport type TypeContext from './TypeContext';\n\nimport {\n  NullLiteralType,\n  NumberType,\n  BooleanType,\n  SymbolType,\n  StringType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  VoidType\n} from './types';\n\n\nexport default function registerPrimitiveTypes (t: TypeContext): TypeContext {\n  primitiveTypes.null = Object.freeze(new NullLiteralType(t));\n  primitiveTypes.empty = Object.freeze(new EmptyType(t));\n  primitiveTypes.number = Object.freeze(new NumberType(t));\n  primitiveTypes.boolean = Object.freeze(new BooleanType(t));\n  primitiveTypes.string = Object.freeze(new StringType(t));\n  primitiveTypes.symbol = Object.freeze(new SymbolType(t));\n  primitiveTypes.any = Object.freeze(new AnyType(t));\n  primitiveTypes.mixed = Object.freeze(new MixedType(t));\n  primitiveTypes.void = Object.freeze(new VoidType(t));\n  primitiveTypes.existential = Object.freeze(new ExistentialType(t));\n  return t;\n}","/* @flow */\nimport getErrorMessage from './getErrorMessage';\n\nimport invariant from './invariant';\n\nimport {Type} from './types';\n\nimport type TypeContext from './TypeContext';\nimport type Validation, {ErrorTuple, IdentifierPath} from './Validation';\n\nexport default function registerBuiltinTypeConstructors (t: TypeContext): TypeContext {\n\n  t.declareTypeConstructor({\n    name: 'Date',\n    impl: Date,\n    typeName: 'DateType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n      if (!(input instanceof Date)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Date'), this];\n      }\n      else if (isNaN(input.getTime())) {\n        yield [path, getErrorMessage('ERR_INVALID_DATE'), this];\n      }\n    },\n    accepts (input): boolean {\n      return input instanceof Date && !isNaN(input.getTime());\n    },\n    inferTypeParameters (input: Date): Type<any>[] {\n      return [];\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Promise',\n    impl: Promise,\n    typeName: 'PromiseType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, futureType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(futureType, 'Must specify type parameter for Promise.');\n      const {context} = this;\n      if (!context.checkPredicate('Promise', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_PROMISE', futureType), this];\n      }\n    },\n    accepts (input): boolean {\n      const {context} = this;\n      return context.checkPredicate('Promise', input);\n    },\n    inferTypeParameters (input: any): Type<any>[] {\n      return [];\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Map',\n    impl: Map,\n    typeName: 'MapType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, keyType?: Type<any>, valueType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(keyType, 'Must specify two type parameters for Map.');\n      invariant(valueType, 'Must specify two type parameters for Map.');\n      const {context} = this;\n      if (!context.checkPredicate('Map', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Map'), this];\n        return;\n      }\n      for (const [key, value] of input) {\n        if (!keyType.accepts(key)) {\n          yield [path, getErrorMessage('ERR_EXPECT_KEY_TYPE', keyType), this];\n        }\n\n        yield* valueType.errors(validation, path.concat(key), value);\n      }\n    },\n    accepts (input, keyType: Type<any>, valueType: Type<any>): boolean {\n      const {context} = this;\n      if (!context.checkPredicate('Map', input)) {\n        return false;\n      }\n      for (const [key, value] of input) {\n        if (!keyType.accepts(key) || !valueType.accepts(value)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    inferTypeParameters (input: Map<*, *>): Type<any>[] {\n      const keyTypes = [];\n      const valueTypes = [];\n      loop: for (const [key, value] of input) {\n        findKey: {\n          for (let i = 0; i < keyTypes.length; i++) {\n            const type = keyTypes[i];\n            if (type.accepts(key)) {\n              break findKey;\n            }\n          }\n          keyTypes.push(t.typeOf(key));\n        }\n\n        for (let i = 0; i < valueTypes.length; i++) {\n          const type = valueTypes[i];\n          if (type.accepts(value)) {\n            continue loop;\n          }\n        }\n        valueTypes.push(t.typeOf(value));\n      }\n      const typeInstances = [];\n\n      if (keyTypes.length === 0) {\n        typeInstances.push(t.existential());\n      }\n      else if (keyTypes.length === 1) {\n        typeInstances.push(keyTypes[0]);\n      }\n      else {\n        typeInstances.push(t.union(...keyTypes));\n      }\n\n      if (valueTypes.length === 0) {\n        typeInstances.push(t.existential());\n      }\n      else if (valueTypes.length === 1) {\n        typeInstances.push(valueTypes[0]);\n      }\n      else {\n        typeInstances.push(t.union(...valueTypes));\n      }\n\n      return typeInstances;\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Set',\n    impl: Set,\n    typeName: 'SetType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, valueType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(valueType, 'Must specify type parameter for Set.');\n      const {context} = this;\n      if (!context.checkPredicate('Set', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Set'), this];\n        return;\n      }\n      for (const value of input) {\n        yield* valueType.errors(validation, path, value);\n      }\n    },\n    accepts (input, valueType) {\n      const {context} = this;\n      if (!context.checkPredicate('Set', input)) {\n        return false;\n      }\n      for (const value of input) {\n        if (!valueType.accepts(value)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    inferTypeParameters (input: Set<*>): Type<any>[] {\n      const valueTypes = [];\n      loop: for (const value of input) {\n        for (let i = 0; i < valueTypes.length; i++) {\n          const type = valueTypes[i];\n          if (type.accepts(value)) {\n            continue loop;\n          }\n        }\n        valueTypes.push(t.typeOf(value));\n      }\n      if (valueTypes.length === 0) {\n        return [t.existential()];\n      }\n      else if (valueTypes.length === 1) {\n        return [valueTypes[0]];\n      }\n      else {\n        return [t.union(...valueTypes)];\n      }\n    }\n  });\n\n  return t;\n}","/* @flow */\n\nimport type TypeContext from './TypeContext';\n\nexport default function registerTypePredicates (context: TypeContext) {\n  context.setPredicate('Array', (input: any) => Array.isArray(input));\n  context.setPredicate('Map', (input: any) => input instanceof Map);\n  context.setPredicate('Set', (input: any) => input instanceof Set);\n  context.setPredicate('Promise', (input: any) => {\n    if (input instanceof Promise) {\n      return true;\n    } else {\n      return input !== null\n        && (typeof input === 'object' || typeof input === 'function')\n        && typeof input.then === 'function'\n        ;\n    }\n  });\n}\n","/* @flow */\n\nimport type TypeContext from './TypeContext';\n\nimport type {\n  Type,\n  ArrayType,\n  ObjectType\n} from './types';\n\ntype Inferred = Map<Object, Type<any>>;\n\nexport class TypeInferer {\n  context: TypeContext;\n\n  constructor (context: TypeContext) {\n    this.context = context;\n  }\n\n  infer <T> (input: T): Type<T> {\n    const primitive = this.inferPrimitive(input);\n    if (primitive) {\n      return primitive;\n    }\n    const inferred = new Map();\n    return this.inferComplex(input, inferred);\n  }\n\n  inferInternal <T> (input: T, inferred: Inferred): Type<T> {\n    const primitive = this.inferPrimitive(input);\n    if (primitive) {\n      return primitive;\n    }\n    return this.inferComplex(input, inferred);\n  }\n\n  inferPrimitive <T> (input: T): ? Type<T> {\n    const {context} = this;\n    if (input === null) {\n      return (context.null(): any);\n    }\n    else if (input === undefined) {\n      return (context.void(): any);\n    }\n    else if (typeof input === 'number') {\n      return (context.number(): any);\n    }\n    else if (typeof input === 'boolean') {\n      return (context.boolean(): any);\n    }\n    else if (typeof input === 'string') {\n      return (context.string(): any);\n    }\n    // @flowIssue 252\n    else if (typeof input === 'symbol') {\n      return context.symbol((input: any));\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  inferComplex <T> (input: T, inferred: Inferred): Type<T> {\n    const {context} = this;\n\n    if (typeof input === 'function') {\n      return (this.inferFunction(input, inferred): any);\n    }\n    else if (input !== null && typeof input === 'object') {\n      return (this.inferObject(input, inferred): any);\n    }\n    else {\n      return (context.any(): any);\n    }\n  }\n\n  inferFunction <T: Function> (input: T, inferred: Inferred): Type<T> {\n    const {context} = this;\n    const {length} = input;\n    const body = new Array(length + 1);\n    for (let i = 0; i < length; i++) {\n      body[i] = context.param(\n        String.fromCharCode(97 + i),\n        context.existential()\n      );\n    }\n    body[length] = context.return(context.existential());\n    return (context.fn(...body): any);\n  }\n\n  inferObject <T: Object> (input: T, inferred: Inferred): Type<T> {\n    const existing = inferred.get(input);\n    if (existing) {\n      return existing;\n    }\n    const {context} = this;\n    let type;\n\n    // Temporarily create a box for this type to catch cyclical references.\n    // Nested references to this object will receive the boxed type.\n    const box = context.box(() => type);\n    inferred.set(input, box);\n\n    if (context.checkPredicate('Array', input)) {\n      type = this.inferArray((input: any), inferred);\n    }\n    else if (!(input instanceof Object)) {\n      type = this.inferDict(input, inferred);\n    }\n    else if (input.constructor !== Object) {\n      const handler = context.getTypeConstructor(input.constructor);\n      if (handler) {\n        const typeParameters = handler.inferTypeParameters(input);\n        type = handler.apply(...typeParameters);\n      }\n      else {\n        type = context.ref(input.constructor);\n      }\n    }\n    else {\n      const body = [];\n      for (const key in input) { // eslint-disable-line\n        const value = input[key];\n        body.push(context.property(key, this.inferInternal(value, inferred)));\n      }\n      type = context.object(...body);\n    }\n\n    // Overwrite the box with the real value.\n    inferred.set(input, type);\n    return (type: any);\n  }\n\n  inferDict <T: Object> (input: T, inferred: Inferred): ObjectType<T> {\n    const numericIndexers = [];\n    const stringIndexers = [];\n    loop: for (const key in input) { // eslint-disable-line\n      const value = input[key];\n      const types = isNaN(+key) ? stringIndexers : numericIndexers;\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (type.accepts(value)) {\n          continue loop;\n        }\n      }\n      types.push(this.inferInternal(value, inferred));\n    }\n\n    const {context} = this;\n    const body = [];\n    if (numericIndexers.length === 1) {\n      body.push(\n        context.indexer(\n          'index',\n          context.number(),\n          numericIndexers[0]\n        )\n      );\n    }\n    else if (numericIndexers.length > 1) {\n      body.push(\n        context.indexer(\n          'index',\n          context.number(),\n          context.union(...numericIndexers)\n        )\n      );\n    }\n\n    if (stringIndexers.length === 1) {\n      body.push(\n        context.indexer(\n          'key',\n          context.string(),\n          stringIndexers[0]\n        )\n      );\n    }\n    else if (stringIndexers.length > 1) {\n      body.push(\n        context.indexer(\n          'key',\n          context.string(),\n          context.union(...stringIndexers)\n        )\n      );\n    }\n\n    return context.object(...body);\n  }\n\n  inferArray <T> (input: T[], inferred: Inferred): ArrayType<T> {\n    const {context} = this;\n    const types = [];\n    const values = [];\n    const {length} = input;\n    loop: for (let i = 0; i < length; i++) {\n      const item = input[i];\n      const inferredType = this.inferInternal(item, inferred);\n      for (let j = 0; j < types.length; j++) {\n        const type = types[j];\n        if (type.accepts(item) && inferredType.accepts(values[j])) {\n          continue loop;\n        }\n      }\n      types.push(inferredType);\n      values.push(item);\n    }\n    if (types.length === 0) {\n      return (context.array(context.any()): any);\n    }\n    else if (types.length === 1) {\n      return context.array(types[0]);\n    }\n    else {\n      return context.array(context.union(...types));\n    }\n  }\n\n}\n\nexport default TypeInferer;","/* @flow */\n\nimport makeError from './makeError';\n\nimport type ObjectType from './types/ObjectType';\n\nexport type PropType<T: {}> = (props: T, propName: string, componentName: string) => ? Error;\n\nexport type PropTypeDict<T: {}> = $ObjMap<T, <V>(v: V) => PropType<V>>;\n\nexport default function makeReactPropTypes <T: {}> (objectType: ObjectType<T>): PropTypeDict<T> {\n  const output = {};\n  if (!objectType.properties) {\n    return output;\n  }\n  for (const property of objectType.properties) {\n    output[property.key] = (props, propName, componentName) => {\n      return makeError(property, props);\n    };\n  }\n  return output;\n}","/* @flow */\nimport {stringifyPath, resolvePath} from '../Validation';\n\nimport type Validation from '../Validation';\n\nconst delimiter = '\\n-------------------------------------------------\\n\\n';\n\nexport default function makeWarningMessage <T> (validation: Validation<T>): ? string {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {input, context} = validation;\n  const collected = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : \"*\";\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n\n    const field = stringifyPath(validation.path.concat(path));\n\n\n    collected.push(\n      `${field} ${message}\\n\\nExpected: ${expected}\\n\\nActual: ${actual}\\n`\n    );\n  }\n  return `Warning: ${collected.join(delimiter)}`;\n}\n","/* @flow */\n\nimport UnionType from './types/UnionType';\nimport compareTypes from './compareTypes';\n\nimport AnyType from './types/AnyType';\nimport MixedType from './types/MixedType';\nimport ExistentialType from './types/ExistentialType';\n\nimport type TypeContext from './TypeContext';\nimport type Type from './types/Type';\n\n\nexport default function makeUnion <T> (context: TypeContext, types: Type<T>[]): Type<T> {\n  const length = types.length;\n  const merged = [];\n  for (let i = 0; i < length; i++) {\n    const type = types[i];\n    if (type instanceof AnyType || type instanceof MixedType || type instanceof ExistentialType) {\n      return (type: $FlowFixme);\n    }\n    if (type instanceof UnionType) {\n      mergeUnionTypes(merged, type.types);\n    }\n    else {\n      merged.push(type);\n    }\n  }\n  const union = new UnionType(context);\n  union.types = merged;\n  return union;\n}\n\nfunction mergeUnionTypes (aTypes: Type<any>[], bTypes: Type<any>[]): void {\n  loop: for (let i = 0; i < bTypes.length; i++) {\n    const bType = bTypes[i];\n    for (let j = 0; j < aTypes.length; j++) {\n      const aType = aTypes[j];\n      if (compareTypes(aType, bType) !== -1) {\n        continue loop;\n      }\n    }\n    aTypes.push(bType);\n  }\n}","/* @flow */\n\nimport type Type from './types/Type';\n\ntype ValueDescriptor<T> = {\n  writable: boolean;\n  initializer?: () => T;\n  enumerable: boolean;\n  configurable: boolean;\n};\n\ntype AccessorDescriptor<T> = {\n  get: () => ? T;\n  set: (value: T) => void;\n  enumerable: boolean;\n  configurable: boolean;\n};\n\nexport type Descriptor<T>\n = AccessorDescriptor<T>\n | ValueDescriptor<T>\n ;\n\ntype TypeSource<T>\n = (() => Type<T>)\n | Type<T>\n ;\n\nexport function makePropertyDescriptor <O: {} | Function, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: Descriptor<T>, shouldAssert: boolean): ? Descriptor<T> {\n  if (typeof descriptor.get === 'function' && typeof descriptor.set === 'function') {\n    return augmentExistingAccessors(typeSource, input, propertyName, (descriptor: $FlowIssue<AccessorDescriptor<T>>), shouldAssert);\n  }\n  else {\n    return propertyToAccessor(typeSource, input, propertyName, (descriptor: $FlowIssue<ValueDescriptor<T>>), shouldAssert);\n  }\n}\n\nfunction makePropertyName (name: string): string {\n  return `_flowRuntime$${name}`;\n}\n\nfunction getClassName (input: Function | Object): string {\n  if (typeof input === 'function') {\n    return input.name || '[Class anonymous]';\n  }\n  else if (typeof input.constructor === 'function') {\n    return getClassName(input.constructor);\n  }\n  else {\n    return '[Class anonymous]';\n  }\n}\n\nfunction resolveType <T> (receiver: any, typeSource: TypeSource<T>): Type<T> {\n  if (typeof typeSource === 'function') {\n    return typeSource.call(receiver);\n  }\n  else {\n    return typeSource;\n  }\n}\n\nfunction propertyToAccessor <O: {}, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: ValueDescriptor<T>, shouldAssert: boolean): AccessorDescriptor<T> {\n  const safeName = makePropertyName(propertyName);\n  const className = getClassName(input);\n  const {initializer, writable, ...config} = descriptor; // eslint-disable-line no-unused-vars\n\n  const propertyPath = [className, propertyName];\n\n  return {\n    ...config,\n    type: 'accessor',\n    get (): ? T {\n      if (safeName in this) {\n        return (this: any)[safeName];\n      }\n      else if (initializer) {\n        const type = resolveType(this, typeSource);\n        const value = initializer.call(this);\n        const context = type.context;\n        context.check(type, value, 'Default value for property', propertyPath);\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: value\n        });\n        return value;\n      }\n      else {\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: undefined\n        });\n      }\n    },\n    set (value: T): void {\n      const type = resolveType(this, typeSource);\n      const context = type.context;\n      if (shouldAssert) {\n        context.assert(type, value, 'Property', propertyPath);\n      }\n      else {\n        context.warn(type, value, 'Property', propertyPath);\n      }\n      if (safeName in this) {\n        this[safeName] = value;\n      }\n      else {\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: value\n        });\n      }\n    }\n  };\n}\n\nfunction augmentExistingAccessors <O: {}, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: AccessorDescriptor<T>, shouldAssert: boolean) {\n\n  const className = getClassName(input);\n  const propertyPath = [className, propertyName];\n\n  const originalSetter = descriptor.set;\n\n  descriptor.set = function set (value: T): void {\n    const type = resolveType(this, typeSource);\n    const context = type.context;\n    if (shouldAssert) {\n      context.assert(type, value, 'Property', propertyPath);\n    }\n    else {\n      context.warn(type, value, 'Property', propertyPath);\n    }\n    originalSetter.call(this, value);\n  };\n\n}\n\n","/* @flow */\n\nimport Type from './types/Type';\n\nimport {TypeSymbol} from './symbols';\n\nexport type Decorator<T> = (input: T) => T;\n\ndeclare function annotateValue <T> (type: Type<T>): Decorator<T>;\ndeclare function annotateValue <T> (input: T, type: Type<T>): T; // eslint-disable-line no-redeclare\n\nexport default function annotateValue (input, type?) { // eslint-disable-line no-redeclare\n  if (type instanceof Type) {\n    input[TypeSymbol] = type;\n    return input;\n  }\n  else {\n    const type = input;\n    return (input) => {\n      input[TypeSymbol] = type;\n      return input;\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// If A and B are object types, $Diff<A,B> is the type of objects that have\n// properties defined in A, but not in B.\n// Properties that are defined in both A and B are allowed too.\n\nexport default class $DiffType<A: {}, B: {}> extends Type<$Diff<A, B>> {\n  typeName: string = '$DiffType';\n\n  aType: Type<A>;\n  bType: Type<B>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {aType, bType} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      yield* property.errors(validation, path.concat(property.key), input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {aType, bType} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      if (!property.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Diff<A, B>> {\n    let {aType, bType} = this;\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    const args = [];\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      args.push(property);\n    }\n    return this.context.object(...args);\n  }\n\n  toString (): string {\n    return `$Diff<${this.aType.toString()}, ${this.bType.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      aType: this.aType,\n      bType: this.bType\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any subtype of T\n\nexport default class $FlowFixMeType extends Type<any> {\n  typeName: string = '$FlowFixMeType';\n\n  *errors (validation: Validation<any>, input: any, path: IdentifierPath = []): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  unwrap (): Type<any> {\n    return this;\n  }\n\n  toString (): string {\n    return '$FlowFixMe';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// The set of keys of T.\n\nexport default class $KeysType<T: {}> extends Type<$Keys<T>> {\n  typeName: string = '$KeysType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (input === property.key) {\n        return;\n      }\n    }\n    const keys = new Array(length);\n    for (let i = 0; i < length; i++) {\n      keys[i] = properties[i].key;\n    }\n    yield [path, getErrorMessage('ERR_NO_UNION', keys.join(' | ')), this];\n  }\n\n  accepts (input: any): boolean {\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (input === property.key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Keys<T>> {\n    const context = this.context;\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    const keys = new Array(length);\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      keys[i] = context.literal(property.key);\n    }\n    return this.context.union(...keys);\n  }\n\n  toString (): string {\n    return `$Keys<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport ObjectTypeProperty from '../types/ObjectTypeProperty';\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the keys and values in an object.\n\nexport default class $ObjMapiType<O: {}, M: Mapper> extends Type<$ObjMapi<O, M>> {\n  typeName: string = '$ObjMapiType';\n\n  object: Type<O>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key), prop.value);\n\n      const value = input[prop.key];\n      yield* returnType.errors(validation, path.concat(prop.key), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key), prop.value);\n\n      const value = input[prop.key];\n      if (!returnType.accepts(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$ObjMapi<O, M>> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    const args = [];\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(context.property(\n        prop.key,\n        applied.invoke(context.literal(prop.key), prop.value)\n      ));\n    }\n\n    return context.object(...args);\n  }\n\n  toString (): string {\n    return `$ObjMapi<${this.object.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport ObjectTypeProperty from '../types/ObjectTypeProperty';\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the keys in an object.\n\nexport default class $ObjMapType<O: {}, M: Mapper> extends Type<$ObjMap<O, M>> {\n  typeName: string = '$ObjMapType';\n\n  object: Type<O>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key));\n\n      const value = input[prop.key];\n      yield* returnType.errors(validation, path.concat(prop.key), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key));\n\n      const value = input[prop.key];\n      if (!returnType.accepts(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$ObjMap<O, M>> {\n\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    const args = [];\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(context.property(\n        prop.key,\n        applied.invoke(context.literal(prop.key))\n      ));\n    }\n\n    return context.object(...args);\n  }\n\n  toString (): string {\n    return `$ObjMap<${this.object.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// The type of the named object property\n\nexport default class $PropertyType<O: {}, P: string | number | Symbol> extends Type {\n  typeName: string = '$PropertyType';\n\n  object: Type<O>;\n\n  property: P;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.unwrap().errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.unwrap().accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<*> {\n    const {object, property} = this;\n    const unwrapped = object.unwrap();\n    invariant(typeof unwrapped.getProperty === 'function', 'Can only use $PropertyType on Objects.');\n    return unwrapped.getProperty(property).unwrap();\n  }\n\n  toString (): string {\n    return `$PropertyType<${this.object.toString()}, ${String(this.property)}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      property: this.property\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// An object of type $Shape<T> does not have to have all of the properties\n// that type T defines. But the types of the properties that it does have\n// must accepts the types of the same properties in T.\n\nexport default class $ShapeType<T> extends Type<$Shape<T>> {\n  typeName: string = '$ShapeType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {type} = this;\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    type = type.unwrap();\n    invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');\n\n    for (const key in input) { // eslint-disable-line guard-for-in\n      const property = type.getProperty(key);\n      if (!property) {\n        continue;\n      }\n      yield* property.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {type} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    type = type.unwrap();\n    invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');\n    for (const key in input) { // eslint-disable-line guard-for-in\n      const property = type.getProperty(key);\n      if (!property || !property.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Shape<T>> {\n    let {type} = this;\n    type = type.unwrap();\n    const context = this.context;\n    invariant(type instanceof ObjectType, 'Can only $Shape<T> object types.');\n    const properties = type.properties;\n    const args = new Array(properties.length);\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      args[i] = context.property(property.key, property.value, true);\n    }\n    return this.context.object(...args);\n  }\n\n  toString (): string {\n    return `$Shape<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any subtype of T\n\nexport default class $SubType<T> extends Type<$Subtype<T>> {\n  typeName: string = '$SubType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(input, path);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Subtype<T>> {\n    return this.type;\n  }\n\n  toString (): string {\n    return `$Subtype<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any, but at least T.\n\nexport default class $SuperType<T> extends Type<$Supertype<T>> {\n  typeName: string = '$SuperType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Supertype<T>> {\n    return this.type;\n  }\n\n  toString (): string {\n    return `$Supertype<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport TupleType from '../types/TupleType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the values in a tuple.\n\nexport default class $TupleMapType<T: [], M: Mapper> extends Type<$TupleMap<T, M>> {\n  typeName: string = '$TupleMapType';\n\n  tuple: Type<T>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be a tuple type.');\n\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const expected = applied.invoke(type);\n      const value = input[i];\n      yield* expected.errors(validation, path.concat(i), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be a tuple type.');\n\n    if (!context.checkPredicate('Array', input)) {\n      return false;\n    }\n\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      if (!applied.invoke(type).accepts(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$TupleMap<T, M>> {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be an tuple type.');\n\n    const args = [];\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(applied.invoke(type).unwrap().unwrap());\n    }\n\n    return context.tuple(...args);\n  }\n\n  toString (): string {\n    return `$TupleMap<${this.tuple.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      tuple: this.tuple,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport GenericType from '../types/GenericType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport type TypeContext from '../TypeContext';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nfunction checkGenericType (context: TypeContext, expected: GenericType, input: Function) {\n  const {impl} = expected;\n  if (typeof impl !== 'function') {\n    // There is little else we can do here, so accept anything.\n    return true;\n  }\n  else if (impl === input || impl.isPrototypeOf(input)) {\n    return true;\n  }\n\n  const annotation = context.getAnnotation(impl);\n  if (annotation == null) {\n    return false;\n  }\n  else {\n    return checkType(context, annotation, input);\n  }\n}\n\nfunction checkType (context: TypeContext, expected: Type<*>, input: Function) {\n  const annotation = context.getAnnotation(input);\n  if (annotation != null) {\n    const result = compareTypes(expected, annotation);\n    return result !== -1;\n  }\n  return true;\n}\n\n\nexport default class ClassType<T> extends Type {\n  typeName: string = 'ClassType';\n\n  instanceType: Type<*>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n\n    const {instanceType, context} = this;\n    if (typeof input !== 'function') {\n      yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n      return;\n    }\n    const expectedType = (\n      instanceType.typeName === 'ClassDeclaration'\n      ? instanceType\n      : instanceType.unwrap()\n    );\n    const isValid = (\n      expectedType instanceof GenericType\n      ? checkGenericType(context, expectedType, input)\n      : checkType(context, expectedType, input)\n    );\n    if (!isValid) {\n      yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {instanceType, context} = this;\n    if (typeof input !== 'function') {\n      return false;\n    }\n    const expectedType = (\n      instanceType.typeName === 'ClassDeclaration'\n      ? instanceType\n      : instanceType.unwrap()\n    );\n    if (expectedType instanceof GenericType) {\n      return checkGenericType(context, expectedType, input);\n    }\n    else {\n      return checkType(context, expectedType, input);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {instanceType} = this;\n    if (input instanceof ClassType) {\n      return compareTypes(instanceType, input.instanceType);\n    }\n    return -1;\n  }\n\n  toString (): string {\n    return `Class<${this.instanceType.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      instanceType: this.instanceType\n    };\n  }\n}","/* @flow */\n\nimport TypeInferrer from './TypeInferrer';\nimport primitiveTypes from './primitiveTypes';\nimport invariant from './invariant';\n\nimport Validation from './Validation';\n\nimport makeReactPropTypes from './makeReactPropTypes';\n\nimport makeJSONError from './errorReporting/makeJSONError';\nimport makeTypeError from './errorReporting/makeTypeError';\nimport makeWarningMessage from './errorReporting/makeWarningMessage';\n\nimport makeUnion from './makeUnion';\nimport compareTypes from './compareTypes';\nimport {makePropertyDescriptor} from './classDecorators';\n\nimport {flowIntoTypeParameter} from './types/TypeParameter';\n\nimport annotateValue from './annotateValue';\n\nimport type {PropTypeDict} from './makeReactPropTypes';\nimport type {IdentifierPath, ErrorTuple} from './Validation';\n\n\nimport {\n  Type,\n  TypeParameter,\n  TypeBox,\n  TypeReference,\n  TypeTDZ,\n  ParameterizedTypeAlias,\n  TypeAlias,\n  TypeConstructor,\n  GenericType,\n  NullLiteralType,\n  NumberType,\n  NumericLiteralType,\n  BooleanType,\n  BooleanLiteralType,\n  SymbolType,\n  SymbolLiteralType,\n  StringType,\n  StringLiteralType,\n  ArrayType,\n  ObjectType,\n  ObjectTypeCallProperty,\n  ObjectTypeIndexer,\n  ObjectTypeProperty,\n  FlowIntoType,\n  FunctionType,\n  ParameterizedFunctionType,\n  FunctionTypeParam,\n  FunctionTypeRestParam,\n  FunctionTypeReturn,\n  GeneratorType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  NullableType,\n  ThisType,\n  TupleType,\n  UnionType,\n  IntersectionType,\n  VoidType,\n  RefinementType\n} from './types';\n\nimport {\n  Declaration,\n  TypeDeclaration,\n  VarDeclaration,\n  ModuleDeclaration,\n  ModuleExportsDeclaration,\n  ClassDeclaration,\n  ParameterizedClassDeclaration,\n  ExtendsDeclaration\n} from './declarations';\n\nimport {\n  $DiffType,\n  $FlowFixMeType,\n  $KeysType,\n  $ObjMapiType,\n  $ObjMapType,\n  $PropertyType as _$PropertyType,\n  $ShapeType,\n  $SubType,\n  $SuperType,\n  $TupleMapType,\n  ClassType\n} from './flowTypes';\n\nimport {\n  ParentSymbol,\n  NameRegistrySymbol,\n  ModuleRegistrySymbol,\n  CurrentModuleSymbol,\n  TypeConstructorRegistrySymbol,\n  TypeParametersSymbol,\n  InferrerSymbol,\n  TypePredicateRegistrySymbol,\n  TypeSymbol\n} from './symbols';\n\nimport type {\n  TypeConstraint,\n  TypeCreator,\n  TypeRevealer,\n  FunctionBodyCreator,\n  ApplicableType,\n  ValidFunctionBody,\n  ObjectPropertyDict,\n  ValidObjectBody\n} from './types';\n\nimport type {\n  ClassBodyCreator,\n  ValidClassBody\n} from './declarations';\n\nexport type TypeConstructorConfig = {\n  name: string;\n  impl?: Function;\n  typeName: string;\n  errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void>;\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean;\n  inferTypeParameters (input: any): Type<any>[];\n};\n\nexport type TypePredicate = (input: any) => boolean;\n\ntype NameRegistry = {\n  [name: string]: Type<any> | Class<TypeConstructor<any>>;\n};\n\ntype TypePredicateRegistry = {\n  [name: string]: TypePredicate;\n};\n\ntype ModuleRegistry = {\n  [name: string]: ModuleDeclaration;\n};\n\ntype TypeConstructorRegistry = Map<Function, Class<TypeConstructor<any>>>;\n\nexport type MatchClause<P, R> = (...params: P[]) => R;\nexport type PatternMatcher<P, R> = (...params: P[]) => R;\n\nexport type CheckMode\n  = 'assert'\n  | 'warn'\n  ;\n\n\n/**\n * Keeps track of invalid references in order to prevent\n * multiple warnings.\n */\nconst warnedInvalidReferences: WeakSet<any> = new WeakSet();\n\nexport default class TypeContext {\n\n  /**\n   * Calls to `t.check(...)` will call either\n   * `t.assert(...)` or `t.warn(...)` depending on this setting.\n   */\n  mode: CheckMode = 'assert';\n\n  // @flowIssue 252\n  [ParentSymbol]: ? TypeContext;\n\n  // @flowIssue 252\n  [NameRegistrySymbol]: NameRegistry = {};\n\n  // @flowIssue 252\n  [TypePredicateRegistrySymbol]: TypePredicateRegistry = {};\n\n  // @flowIssue 252\n  [TypeConstructorRegistrySymbol]: TypeConstructorRegistry = new Map();\n\n  // @flowIssue 252\n  [InferrerSymbol]: TypeInferrer = new TypeInferrer(this);\n\n  // @flowIssue 252\n  [ModuleRegistrySymbol]: ModuleRegistry = {};\n\n  // @flowIssue 252\n  [CurrentModuleSymbol]: ? ModuleDeclaration;\n\n  get TypeParametersSymbol (): typeof TypeParametersSymbol {\n    return TypeParametersSymbol;\n  }\n\n\n  makeJSONError <T> (validation: Validation<T>): ? Array<Object> {\n    return makeJSONError(validation);\n  }\n\n  makeTypeError <T> (validation: Validation<T>): ? TypeError {\n    return makeTypeError(validation);\n  }\n\n  createContext (): TypeContext {\n    const context = new TypeContext();\n    // @flowIssue 252\n    context[ParentSymbol] = this;\n    return context;\n  }\n\n  typeOf <T> (input: T): Type<T> {\n\n    const annotation = this.getAnnotation(input);\n    if (annotation) {\n      if (typeof input === 'function' && (annotation instanceof ClassDeclaration || annotation instanceof ParameterizedClassDeclaration)) {\n        return this.Class(annotation);\n      }\n      return annotation;\n    }\n    // @flowIssue 252\n    const inferrer = this[InferrerSymbol];\n    (inferrer: TypeInferrer);\n\n    return inferrer.infer(input);\n  }\n\n  compareTypes (a: Type<any>, b: Type<any>): -1 | 0 | 1 {\n    return compareTypes(a, b);\n  }\n\n  get (name: string, ...propertyNames: string[]): ? Type<any> {\n    // @flowIssue 252\n    const item = this[NameRegistrySymbol][name];\n    if (item != null) {\n      let current = typeof item === 'function'\n                  ? new item(this)\n                  : item\n                  ;\n      for (let i = 0; i < propertyNames.length; i++) {\n        const propertyName = propertyNames[i];\n        if (typeof current.getProperty !== 'function') {\n          return;\n        }\n        current = current.getProperty(propertyName);\n        if (!current) {\n          return;\n        }\n        current = current.unwrap();\n      }\n      return current;\n    }\n    // @flowIssue 252\n    const parent = this[ParentSymbol];\n    if (parent) {\n      const fromParent = parent.get(name, ...propertyNames);\n      if (fromParent) {\n        return fromParent;\n      }\n    }\n\n    // if we got this far, see if we have a global type with this name.\n    if (typeof global[name] === 'function') {\n      const target = new GenericType(this);\n      target.name = name;\n      target.impl = global[name];\n      // @flowIssue 252\n      this[NameRegistrySymbol][name] = target;\n      return target;\n    }\n  }\n\n  /**\n   * Get the predicate for a given type name.\n   * e.g. `t.getPredicate('Array')`.\n   */\n  getPredicate (name: string): ? TypePredicate {\n    const item: ? TypePredicate = (this: any)[TypePredicateRegistrySymbol][name];\n    if (item) {\n      return item;\n    }\n    const parent: ? TypeContext = (this: any)[ParentSymbol];\n    if (parent) {\n      return parent.getPredicate(name);\n    }\n  }\n\n  /**\n   * Set the predicate for a given type name.\n   * This can be used to customise the behaviour of things like Array\n   * detection or allowing Thenables in place of the global Promise.\n   */\n  setPredicate (name: string, predicate: TypePredicate) {\n    (this: any)[TypePredicateRegistrySymbol][name] = predicate;\n  }\n\n  /**\n   * Check the given value against the named predicate.\n   * Returns false if no such predicate exists.\n   * e.g. `t.checkPredicate('Array', [1, 2, 3])`\n   */\n  checkPredicate (name: string, input: any): boolean {\n    const predicate = this.getPredicate(name);\n    if (predicate) {\n      return predicate(input);\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Returns a decorator for a function or object with the given type.\n   */\n  decorate (type: (() => Type<any>) | Type<any>, shouldAssert?: boolean): * {\n    if (shouldAssert == null) {\n      shouldAssert = this.mode === 'assert';\n    }\n    return (input: Object | Function, propertyName?: string, descriptor?: Object): * => {\n      if (descriptor && typeof propertyName === 'string') {\n        return makePropertyDescriptor(type, input, propertyName, descriptor, Boolean(shouldAssert));\n      }\n      else {\n        invariant(typeof type !== 'function', 'Cannot decorate an object or function as a method.');\n        return this.annotate(input, type);\n      }\n    };\n  }\n\n  /**\n   * Annotates an object or function with the given type.\n   * If a type is specified as the sole argument, returns a\n   * function which can decorate classes or functions with the given type.\n   */\n  annotate <T> (input: Type<T> | T, type?: Type<T>) {\n    if (type === undefined) {\n      return annotateValue(input);\n    }\n    else {\n      return annotateValue(input, type);\n    }\n  }\n\n  getAnnotation <T> (input: T): ? Type<T> {\n    if ((input !== null && typeof input === 'object') || typeof input === 'function') {\n      // @flowIssue 252\n      return input[TypeSymbol];\n    }\n  }\n\n  hasAnnotation (input: any): boolean {\n    if (input == null) {\n      return false;\n    }\n    else {\n      return input[TypeSymbol] ? true : false;\n    }\n  }\n\n  setAnnotation <T: Object | Function> (input: T, type: Type<T>): T {\n    input[TypeSymbol] = type;\n    return input;\n  }\n\n  type <T> (name: string, type: Type<T> | TypeCreator<Type<T>>): TypeAlias<T> | ParameterizedTypeAlias<T> {\n    if (typeof type === 'function') {\n      const target = new ParameterizedTypeAlias(this);\n      target.name = name;\n      target.typeCreator = type;\n      return target;\n    }\n    else {\n      const target = new TypeAlias(this);\n      target.name = name;\n      target.type = type;\n      return target;\n    }\n  }\n\n  declare <T: any, D: ModuleDeclaration | TypeDeclaration<T> | VarDeclaration<T> | ClassDeclaration<T>> (name: string | D, type?: Type<T> | TypeCreator<Type<T>>): D | TypeDeclaration<T> {\n\n    if (name instanceof Declaration) {\n      type = name;\n      name = type.name;\n    }\n    else if (name instanceof TypeAlias) {\n      type = name;\n      name = type.name;\n    }\n    if (typeof type === 'function') {\n      type = this.type(name, type);\n    }\n    if (type instanceof ModuleDeclaration) {\n      const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n      moduleRegistry[name] = type;\n      return type;\n    }\n    else {\n      invariant(typeof name === 'string', 'Name must be a string');\n      invariant(type instanceof Type, 'Type must be supplied to declaration');\n      const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n\n      if (type instanceof Declaration) {\n        nameRegistry[name] = type;\n        return type;\n      }\n      else if (type instanceof TypeAlias || type instanceof ParameterizedTypeAlias) {\n        const target = new TypeDeclaration(this);\n        target.name = name;\n        target.typeAlias = type;\n        nameRegistry[name] = target;\n        return target;\n      }\n      else {\n        const target = this.var(name, type);\n        nameRegistry[name] = target;\n        return target;\n      }\n    }\n  }\n\n  *declarations (): Generator<[string, Type<any> | TypeConstructor<any>], void, void> {\n    const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n    for (const key in nameRegistry) { // eslint-disable-line guard-for-in\n      yield [key, nameRegistry[key]];\n    }\n  }\n\n  *modules (): Generator<ModuleDeclaration, void, void> {\n    const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n    for (const key in moduleRegistry) { // eslint-disable-line guard-for-in\n      yield moduleRegistry[key];\n    }\n  }\n\n  import (moduleName: string): ? ModuleDeclaration {\n    const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n    if (moduleRegistry[moduleName]) {\n      return moduleRegistry[moduleName];\n    }\n    const [head] = moduleName.split('/');\n    const module = moduleRegistry[head];\n    if (module) {\n      return module.import(moduleName);\n    }\n    const parent = (this: $FlowIssue<252>)[ParentSymbol];\n    if (parent) {\n      return parent.import(moduleName);\n    }\n  }\n\n  declareTypeConstructor ({name, impl, typeName, errors, accepts, inferTypeParameters}: TypeConstructorConfig): TypeConstructor<any> {\n    const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n\n    if (nameRegistry[name]) {\n      this.emitWarningMessage(`Redeclaring type: ${name}, this may be unintended.`);\n    }\n\n    const target = new TypeConstructor(this);\n    target.name = name;\n    target.typeName = typeName;\n    target.impl = impl;\n    target.errors = errors;\n    target.accepts = accepts;\n    target.inferTypeParameters = inferTypeParameters;\n\n    nameRegistry[name] = target;\n\n    if (typeof impl === 'function') {\n      // @flowIssue 252\n      const handlerRegistry = this[TypeConstructorRegistrySymbol];\n      (handlerRegistry: TypeConstructorRegistry);\n\n      if (handlerRegistry.has(impl)) {\n        this.emitWarningMessage(`A type handler already exists for the given implementation of ${name}.`);\n      }\n      handlerRegistry.set(impl, target);\n    }\n    return target;\n  }\n\n  getTypeConstructor (impl: Function): ? TypeConstructor<any> {\n    // @flowIssue 252\n    const handlerRegistry = this[TypeConstructorRegistrySymbol];\n    (handlerRegistry: TypeConstructorRegistry);\n\n    return handlerRegistry.get(impl);\n  }\n\n  literal <T: void | null | boolean | number | string | Symbol> (input: T): Type<T> {\n    if (input === undefined) {\n      return this.void();\n    }\n    else if (input === null) {\n      return this.null();\n    }\n    else if (typeof input === 'boolean') {\n      return this.boolean(input);\n    }\n    else if (typeof input === 'number') {\n      return this.number(input);\n    }\n    else if (typeof input === 'string') {\n      return this.string(input);\n    }\n    // @flowIssue 252\n    else if (typeof input === 'symbol') {\n      return this.symbol(input);\n    }\n    else {\n      return this.typeOf(input);\n    }\n  }\n\n  null (): NullLiteralType {\n    return primitiveTypes.null;\n  }\n\n  nullable <T> (type: Type<T>): NullableType<? T> {\n    const target = new NullableType(this);\n    target.type = type;\n    return target;\n  }\n\n  existential (): ExistentialType {\n    return primitiveTypes.existential;\n  }\n\n\n  empty (): EmptyType {\n    return primitiveTypes.empty;\n  }\n\n  any (): AnyType {\n    return primitiveTypes.any;\n  }\n\n  mixed (): MixedType {\n    return primitiveTypes.mixed;\n  }\n\n  void (): VoidType {\n    return primitiveTypes.void;\n  }\n\n  this <T> (input?: T): ThisType<T> {\n    const target = new ThisType(this);\n    if (input !== undefined) {\n      target.recorded = input;\n    }\n    return target;\n  }\n\n  number <T: number> (input?: T): NumberType | NumericLiteralType<T> {\n    if (input !== undefined) {\n      const target = new NumericLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.number;\n    }\n  }\n\n  boolean <T: boolean> (input?: T): BooleanType | BooleanLiteralType<T> {\n    if (input !== undefined) {\n      const target = new BooleanLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.boolean;\n    }\n  }\n\n  string <T: string> (input?: T): StringType | StringLiteralType<T> {\n    if (input !== undefined) {\n      const target = new StringLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.string;\n    }\n  }\n\n  symbol <T: Symbol> (input?: T): SymbolType | SymbolLiteralType<T> {\n    if (input !== undefined) {\n      const target = new SymbolLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.symbol;\n    }\n  }\n\n  typeParameter <T> (id: string, bound?: Type<T>, defaultType?: Type<T>): TypeParameter<T> {\n    const target = new TypeParameter(this);\n    target.id = id;\n    target.bound = bound;\n    target.default = defaultType;\n    return target;\n  }\n\n  flowInto <T> (typeParameter: TypeParameter<T>): FlowIntoType<T> {\n    return flowIntoTypeParameter(typeParameter);\n  }\n\n  /**\n   * Bind the type parameters for the parent class of the given instance.\n   */\n  bindTypeParameters <T: {}> (subject: T, ...typeInstances: Type<any>[]): T {\n    const instancePrototype = Object.getPrototypeOf(subject);\n    // @flowIssue\n    const parentPrototype = instancePrototype && Object.getPrototypeOf(instancePrototype);\n    // @flowIssue\n    const parentClass = parentPrototype && parentPrototype.constructor;\n\n    if (!parentClass) {\n      this.emitWarningMessage('Could not bind type parameters for non-existent parent class.');\n      return subject;\n    }\n    // @flowIssue 252\n    const typeParametersPointer = parentClass[TypeParametersSymbol];\n\n    if (typeParametersPointer) {\n      const typeParameters = subject[typeParametersPointer];\n      const keys = Object.keys(typeParameters);\n      const length = Math.min(keys.length, typeInstances.length);\n      for (let i = 0; i < length; i++) {\n        const typeParam = typeParameters[keys[i]];\n        typeParam.bound = typeInstances[i];\n      }\n    }\n    return subject;\n  }\n\n  module (name: string, body: (context: TypeContext) => any): ModuleDeclaration {\n    const target = new ModuleDeclaration(this);\n    target.name = name;\n    const innerContext = this.createContext();\n    // @flowIssue 252\n    innerContext[ParentSymbol] = this;\n    // @flowIssue 252\n    innerContext[CurrentModuleSymbol] = target;\n\n    target.innerContext = innerContext;\n    body(innerContext);\n    return target;\n  }\n\n  moduleExports <T> (type: Type<T>): ModuleExportsDeclaration<T> {\n    const currentModule: ModuleDeclaration = (this: $FlowIssue<252>)[CurrentModuleSymbol];\n    if (!currentModule) {\n      throw new Error('Cannot declare module.exports outside of a module.');\n    }\n    const target = new ModuleExportsDeclaration(this);\n    target.type = type;\n    currentModule.moduleExports = target;\n    return target;\n  }\n\n  var <T> (name: string, type: Type<T>): VarDeclaration<T> {\n    const target = new VarDeclaration(this);\n    target.name = name;\n    target.type = type;\n    return target;\n  }\n\n  class <X, O: {}> (name: string, head?: ClassBodyCreator<X, O> | ValidClassBody<X, O>, ...tail: Array<ValidClassBody<X, O>>): ClassDeclaration<O> {\n    if (typeof head === 'function') {\n      const target = new ParameterizedClassDeclaration(this);\n      target.name = name;\n      target.bodyCreator = head;\n      return target;\n    }\n    const target = new ClassDeclaration(this);\n    target.name = name;\n    if (head != null) {\n      tail.unshift(head);\n    }\n    const {length} = tail;\n    const properties = [];\n    let body;\n\n    for (let i = 0; i < length; i++) {\n      const item = tail[i];\n      if (item instanceof ObjectTypeProperty || item instanceof ObjectTypeIndexer) {\n        properties.push(item);\n      }\n      else if (item instanceof ObjectType) {\n        invariant(!body, 'Class body must only be declared once.');\n        body = item;\n      }\n      else if (item instanceof ExtendsDeclaration) {\n        invariant(!target.superClass, 'Classes can only have one super class.');\n        target.superClass = item;\n      }\n      else if (item != null && typeof item === 'object' && !(item instanceof Type)) {\n        for (const propertyName in item) { // eslint-disable-line\n          properties.push(this.property(propertyName, (item: any)[propertyName]));\n        }\n      }\n      else {\n        throw new Error('ClassDeclaration cannot contain the given type directly.');\n      }\n    }\n    if (!body) {\n      body = new ObjectType(this);\n    }\n    if (properties.length) {\n      body.properties.push(...properties);\n    }\n    target.body = body;\n    return target;\n  }\n\n  extends <T, P> (subject: string | ApplicableType<T> | Function, ...typeInstances: Type<P>[]): ExtendsDeclaration<T> {\n    const target = new ExtendsDeclaration(this);\n    target.type = this.ref(subject, ...typeInstances);\n    return target;\n  }\n\n  fn <X, P, R> (head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ParameterizedFunctionType<X, P, R> | FunctionType<P, R> {\n    return this.function(head, ...tail);\n  }\n\n  function <X, P, R> (head: ? FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ParameterizedFunctionType<X, P, R> | FunctionType<P, R> {\n    if (typeof head === 'function') {\n      const target = new ParameterizedFunctionType(this);\n      target.bodyCreator = head;\n      return target;\n    }\n    const target = new FunctionType(this);\n    if (head != null) {\n      tail.unshift(head);\n      const {length} = tail;\n      for (let i = 0; i < length; i++) {\n        const item = tail[i];\n        if (item instanceof FunctionTypeParam) {\n          target.params.push(item);\n        }\n        else if (item instanceof FunctionTypeRestParam) {\n          target.rest = item;\n        }\n        else if (item instanceof FunctionTypeReturn) {\n          target.returnType = item;\n        }\n        else {\n          throw new Error('FunctionType cannot contain the given type directly.');\n        }\n      }\n    }\n    if (!target.returnType) {\n      target.returnType = this.any();\n    }\n    return target;\n  }\n\n  param <T> (name: string, type: Type<T>, optional: boolean = false): FunctionTypeParam<T> {\n    const target = new FunctionTypeParam(this);\n    target.name = name;\n    target.type = type;\n    target.optional = optional;\n    return target;\n  }\n\n  rest <T> (name: string, type: Type<T>): FunctionTypeRestParam<T> {\n    const target = new FunctionTypeRestParam(this);\n    target.name = name;\n    target.type = type;\n    return target;\n  }\n\n  return <T> (type: Type<T>): FunctionTypeReturn<T> {\n    const target =  new FunctionTypeReturn(this);\n    target.type = type;\n    return target;\n  }\n\n  generator <Y, R, N> (yieldType: Type<Y>, returnType?: Type<R>, nextType?: Type<N>): GeneratorType<Y, R, N> {\n    const target = new GeneratorType(this);\n    target.yieldType = yieldType;\n    target.returnType = returnType || this.any();\n    target.nextType = nextType || this.any();\n    return target;\n  }\n\n  object <T: {}> (head: ? ValidObjectBody<T> | $ObjMap<T, <V>(v: V) => Type<V>>, ...tail: ValidObjectBody<T>[]): ObjectType<T> {\n    const target = new ObjectType(this);\n    if (head != null && typeof head === 'object' && !(head instanceof Type)) {\n      for (const propertyName in head) { // eslint-disable-line\n        target.properties.push(this.property(propertyName, head[propertyName]));\n      }\n    }\n    else {\n      let body;\n      if (head) {\n        body = [head, ...tail];\n      }\n      else {\n        body = tail;\n      }\n      const {length} = body;\n      for (let i = 0; i < length; i++) {\n        const item = body[i];\n        if (item instanceof ObjectTypeProperty) {\n          target.properties.push(item);\n        }\n        else if (item instanceof ObjectTypeIndexer) {\n          target.indexers.push(item);\n        }\n        else if (item instanceof ObjectTypeCallProperty) {\n          target.callProperties.push(item);\n        }\n        else {\n          throw new Error('ObjectType cannot contain the given type directly.');\n        }\n      }\n    }\n    return target;\n  }\n\n  exactObject <T: {}> (head: ? ValidObjectBody<T> | $ObjMap<T, <V>(v: V) => Type<V>>, ...tail: ValidObjectBody<T>[]): ObjectType<T> {\n    const object = this.object(head, ...tail);\n    object.exact = true;\n    return object;\n  }\n\n  callProperty <T> (value: Type<T>): ObjectTypeCallProperty<T> {\n    const target = new ObjectTypeCallProperty(this);\n    target.value = value;\n    return target;\n  }\n\n  property <K: string | number, V> (key: K, value: Type<V> | ObjectPropertyDict<{}>, optional: boolean = false): ObjectTypeProperty<K, V> {\n    const target = new ObjectTypeProperty(this);\n    target.key = key;\n    if (value instanceof Type) {\n      target.value = value;\n    }\n    else {\n      target.value = this.object(value);\n    }\n    target.optional = optional;\n    return target;\n  }\n\n  indexer <K, V> (id: string, key: Type<K>, value: Type<V>): ObjectTypeIndexer<K, V> {\n    const target = new ObjectTypeIndexer(this);\n    target.id = id;\n    target.key = key;\n    target.value = value;\n    return target;\n  }\n\n  method <K: string | number, X, P, R> (name: K, head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ObjectTypeProperty<K, (...params: P[]) => R> {\n    const target = new ObjectTypeProperty(this);\n    target.key = name;\n    target.value = this.function(head, ...tail);\n    return target;\n  }\n\n  staticCallProperty <T: Function> (value: Type<T>): ObjectTypeCallProperty<T> {\n    const prop = this.callProperty(value);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  staticProperty <K: string | number, V> (key: K, value: Type<V> | ObjectPropertyDict<{}>, optional: boolean = false): ObjectTypeProperty<K, V> {\n    const prop = this.property(key, value, optional);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  staticMethod <K: string | number, X, P, R> (name: K, head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ObjectTypeProperty<K, (...params: P[]) => R> {\n    const prop = this.method(name, head, ...tail);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  tuple <T> (...types: Type<T>[]): TupleType<any> {\n    const target = new TupleType(this);\n    target.types = types;\n    return target;\n  }\n\n  array <T> (elementType?: Type<T>): ArrayType<T> {\n    const target = new ArrayType(this);\n    target.elementType = elementType || this.any();\n    return target;\n  }\n\n  union <T> (...types: Type<T>[]): Type<T> {\n    return makeUnion(this, types);\n  }\n\n  intersect <T: {}> (...types: Type<T>[]): IntersectionType<T> {\n    const target = new IntersectionType(this);\n    target.types = types;\n    return target;\n  }\n\n  intersection <T: {}> (...types: Type<T>[]): IntersectionType<T> {\n    return this.intersect(...types);\n  }\n\n  box <T> (reveal: TypeRevealer<T>): TypeBox<T> {\n    const box = new TypeBox(this);\n    box.reveal = reveal;\n    return box;\n  }\n\n  tdz <T> (reveal: TypeRevealer<T>, name?: string): TypeTDZ<T> {\n    const tdz = new TypeTDZ(this);\n    tdz.reveal = reveal;\n    tdz.name = name;\n    return tdz;\n  }\n\n  ref <T, P> (subject: string | ApplicableType<T> | Function, ...typeInstances: Type<P>[]): Type<T | any> {\n    let target;\n    if (typeof subject === 'string') {\n      // try and eagerly resolve the reference\n      target = this.get(subject);\n      if (!target) {\n        // defer dereferencing for now\n        target = new TypeReference(this);\n        target.name = subject;\n      }\n    }\n    else if (typeof subject === 'function') {\n      // @flowIssue 252\n      const handlerRegistry = this[TypeConstructorRegistrySymbol];\n      (handlerRegistry: TypeConstructorRegistry);\n\n      // see if we have a dedicated TypeConstructor for this.\n      target = handlerRegistry.get(subject);\n\n      if (!target) {\n        // just use a generic type handler.\n        target = new GenericType(this);\n        target.impl = subject;\n        target.name = subject.name;\n      }\n\n    }\n    else if (subject instanceof Type) {\n      target = subject;\n    }\n    else {\n      if (subject == null || typeof subject !== 'object') {\n        this.emitWarningMessage(`Could not reference the given type, try t.typeOf(value) instead. (got ${String(subject)})`);\n      }\n      else if (!warnedInvalidReferences.has(subject)) {\n        this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead.');\n        warnedInvalidReferences.add(subject);\n      }\n      return this.any();\n    }\n\n    if (typeInstances.length) {\n      invariant(typeof target.apply === 'function', `Cannot apply non-applicable type: ${target.typeName}.`);\n      return target.apply(...typeInstances);\n    }\n    else {\n      return target;\n    }\n  }\n\n  validate <T> (type: Type<T>, input: any, prefix: string = '', path?: string[]): Validation<T> {\n    const validation = new Validation(this, input);\n    if (path) {\n      validation.path.push(...path);\n    }\n    else if (typeof type.name === 'string') {\n      validation.path.push(type.name);\n    }\n    validation.prefix = prefix;\n    validation.errors = Array.from(type.errors(validation, [], input));\n    return validation;\n  }\n\n  check <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    if (this.mode === 'assert') {\n      return this.assert(type, input, prefix, path);\n    }\n    else {\n      return this.warn(type, input, prefix, path);\n    }\n  }\n\n  assert <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    const validation = this.validate(type, input, prefix, path);\n    const error = this.makeTypeError(validation);\n    if (error) {\n      throw error;\n    }\n    return input;\n  }\n\n  warn <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    const validation = this.validate(type, input, prefix, path);\n    const message = makeWarningMessage(validation);\n    if (typeof message === 'string') {\n      this.emitWarningMessage(message);\n    }\n    return input;\n  }\n\n  /**\n   * Emits a warning message, using `console.warn()` by default.\n   */\n  emitWarningMessage (message: string): void {\n    console.warn('flow-runtime:', message);\n  }\n\n  propTypes <T: {}> (type: Type<T>): PropTypeDict<T> {\n    return makeReactPropTypes((type.unwrap(): $FlowIgnore));\n  }\n\n  match <P, R> (...args: Array<P | MatchClause<P, R>>): R {\n    const clauses: any = args.pop();\n    if (!Array.isArray(clauses)) {\n      throw new Error('Invalid pattern, last argument must be an array.');\n    }\n    (clauses: MatchClause<P, R>[]);\n    const pattern = this.pattern(...clauses);\n    return pattern(...args);\n  }\n\n  pattern <P, R> (...clauses: MatchClause<P, R>[]): PatternMatcher<P, R> {\n    const {length} = clauses;\n    const tests: Array<true | FunctionType<P, R> | ParameterizedFunctionType<any, P, R>> = new Array(length);\n    for (let i = 0; i < length; i++) {\n      const clause = clauses[i];\n      const annotation = this.getAnnotation(clause);\n      if (!annotation) {\n        if (i !== length - 1) {\n          throw new Error(`Invalid Pattern - found unannotated function in position ${i}, default clauses must be last.`);\n        }\n        tests[i] = true;\n      }\n      else {\n        invariant(annotation instanceof FunctionType || annotation instanceof ParameterizedFunctionType, 'Pattern clauses must be annotated functions.');\n        tests[i] = annotation;\n      }\n    }\n    return (...args: P[]): R => {\n      for (let i = 0; i < tests.length; i++) {\n        const test = tests[i];\n        const clause = clauses[i];\n        if (test === true) {\n          return clause(...args);\n        }\n        else if (test.acceptsParams(...args)) {\n          return clause(...args);\n        }\n      }\n      const error = new TypeError('Value did not match any of the candidates.');\n      error.name = 'RuntimeTypeError';\n      throw error;\n    };\n  }\n\n  wrapIterator <T> (type: Type<T>): (input: Iterable<T>) => Generator<T, void, void> {\n    const t = this;\n    return function* wrappedIterator (input: Iterable<T>): Generator<T, void, void> {\n      for (const item of input) {\n        yield t.check(type, item);\n      }\n    };\n  }\n\n  refinement <T> (type: Type<T>, ...constraints: TypeConstraint[]): RefinementType<T> {\n    const target = new RefinementType(this);\n    target.type = type;\n    target.addConstraint(...constraints);\n    return target;\n  }\n\n\n  $diff <A: {}, B: {}> (aType: Type<A>, bType: Type<B>): $DiffType<A, B> {\n    const target = new $DiffType(this);\n    target.aType = aType;\n    target.bType = bType;\n    return target;\n  }\n\n  $flowFixMe (): $FlowFixMeType {\n    return new $FlowFixMeType(this);\n  }\n\n  $keys <T: {}> (type: Type<T>): $KeysType<T> {\n    const target = new $KeysType(this);\n    target.type = type;\n    return target;\n  }\n\n  $objMap <O: {}, K: $Keys<O>, M: (k: K) => any> (object: Type<O>, mapper: Type<M>): $ObjMapType<O, M> {\n    const target = new $ObjMapType(this);\n    target.object = object;\n    target.mapper = mapper;\n    return target;\n  }\n\n  $objMapi <O: {}, K: $Keys<O>, M: (k: K, v: any) => any> (object: Type<O>, mapper: Type<M>): $ObjMapiType<O, M> {\n    const target = new $ObjMapiType(this);\n    target.object = object;\n    target.mapper = mapper;\n    return target;\n  }\n\n  $propertyType <O: {}, P: string | number | Symbol> (object: Type<O>, property: P | Type<P>): _$PropertyType<O, P> {\n    const target = new _$PropertyType(this);\n    target.object = object;\n    if (property instanceof Type) {\n      const unwrapped = property.unwrap();\n      target.property = (unwrapped: any).value;\n    }\n    else {\n      target.property = property;\n    }\n    return target;\n  }\n\n  $shape <T: {}> (type: Type<T>): $ShapeType<T> {\n    const target = new $ShapeType(this);\n    target.type = type;\n    return target;\n  }\n\n  $subtype <T: {}> (type: Type<T>): $SubType<T> {\n    const target = new $SubType(this);\n    target.type = type;\n    return target;\n  }\n\n  $supertype <T: {}> (type: Type<T>): $SuperType<T> {\n    const target = new $SuperType(this);\n    target.type = type;\n    return target;\n  }\n\n  $tupleMap <T: [], M: (v: *) => *> (tuple: Type<T>, mapper: Type<M>): $TupleMapType<T, M> {\n    const target = new $TupleMapType(this);\n    target.tuple = tuple;\n    target.mapper = mapper;\n    return target;\n  }\n\n  Class <T: {}> (instanceType: Type<T>): ClassType<T> {\n    const target = new ClassType(this);\n    target.instanceType = instanceType;\n    return target;\n  }\n}\n\n","/* @flow */\n\nimport registerPrimitiveTypes from './registerPrimitiveTypes';\nimport registerBuiltinTypeConstructors from './registerBuiltins';\nimport registerTypePredicates from './registerTypePredicates';\n\nimport TypeContext from './TypeContext';\n\nlet globalContext;\nif (typeof global !== 'undefined' && typeof global.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== 'undefined') {\n  globalContext = global.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__;\n}\nelse {\n  globalContext = new TypeContext();\n  registerPrimitiveTypes(globalContext);\n  registerBuiltinTypeConstructors(globalContext);\n  registerTypePredicates(globalContext);\n  if (typeof global !== 'undefined') {\n    global.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ = globalContext;\n  }\n}\n\n\nexport default globalContext;"],"names":["primitiveTypes","makeJSONError","validation","hasErrors","input","context","errors","path","message","expectedType","expected","toString","actual","typeOf","resolvePath","field","stringifyPath","concat","pointer","join","push","cyclicValidation","WeakMap","cyclicToString","WeakSet","inValidationCycle","type","tracked","get","weakSetHas","e","startValidationCycle","set","endValidationCycle","inToStringCycle","has","startToStringCycle","add","endToStringCycle","delete","weakset","value","weakSetAdd","weakSetDelete","validIdentifierOrAccessor","Validation","prefix","cyclic","candidate","matchPath","length","didClear","error","parts","Array","i","part","test","String","subject","undefined","Map","RuntimeTypeError","name","TypeError","delimiter","makeTypeError","collected","trim","makeError","validate","compareTypes","a","b","result","TypeAlias","TypeParameter","TypeTDZ","unwrap","compareWith","FlowIntoType","AnyType","ExistentialType","MixedType","Type","typeName","Error","captureStackTrace","assert","errorMessages","getErrorMessage","key","params","replace","m","TupleType","types","checkPredicate","accepts","inputTypes","isGreater","ArrayType","inCycle","startCycle","elementType","endCycle","output","BooleanLiteralType","BooleanType","EmptyType","FlowIntoSymbol","Symbol","boundOrDefault","bound","default","recorded","withBinding","id","defaultType","flowIntoTypeParameter","typeParameter","existing","target","hasError","union","toJSON","FunctionTypeRestParam","FunctionTypeParam","optional","FunctionTypeReturn","ParentSymbol","NameRegistrySymbol","ModuleRegistrySymbol","CurrentModuleSymbol","TypeConstructorRegistrySymbol","InferrerSymbol","TypeSymbol","TypeParametersSymbol","TypePredicateRegistrySymbol","FunctionType","annotation","returnType","param","annotationParam","acceptsType","any","inputReturnType","returnTypeResult","inputParams","inputParam","rest","paramsLength","args","argsLength","empty","GeneratorType","isValid","next","return","throw","yieldType","nextType","TypeParameterApplication","typeInstances","parent","inner","hasProperty","getProperty","items","typeInstance","warnedInstances","TypeConstructor","emitWarningMessage","GenericType","impl","getAnnotation","isPrototypeOf","invariant","NullLiteralType","VoidType","NullableType","addConstraints","constraints","collectConstraintErrors","constraint","violation","constraintsAccept","ObjectTypeProperty","isStatic","static","constructor","targetPath","isNullable","existsOn","ObjectTypeIndexer","keyResult","valueResult","ObjectTypeCallProperty","Declaration","VarDeclaration","TypeDeclaration","typeAlias","addConstraint","apply","ModuleDeclaration","moduleExports","exporting","prop","declaration","declarations","moduleName","slice","innerContext","import","modules","body","module","indent","lines","split","ModuleExports","ClassDeclaration","shapeID","superClass","errorPath","errorMessage","propertyName","isSuperClassOf","current","withDeclaration","superClassName","properties","bodyProps","superProps","seen","seenStatic","props","PartialType","typeParameters","expand","ParameterizedClassDeclaration","getPartial","partial","bodyCreator","isArray","class","limit","Math","min","intersect","ExtendsDeclaration","ObjectType","indexers","callProperties","exact","property","getIndexer","hasIndexer","indexer","acceptsKey","hasCallProperties","acceptsCallProperties","collectErrorsWithIndexers","collectErrorsExact","collectErrorsWithoutIndexers","acceptsWithIndexers","acceptsExact","acceptsWithoutIndexers","compareTypeCallProperties","compareTypeWithIndexers","compareTypeWithoutIndexers","callProperty","inputCallProperties","identicalCount","j","inputCallProperty","loop","indexOf","acceptsValue","inputIndexers","inputProperties","inputProperty","inputIndexer","IntersectionType","object","getPropertyIndex","mergeProperties","source","typeProp","index","hasConstraints","NumericLiteralType","NumberType","ParameterizedTypeAlias","identifier","typeCreator","ParameterizedFunctionType","acceptsParams","acceptsReturn","assertParams","assertReturn","function","RefinementType","StringLiteralType","JSON","stringify","StringType","SymbolLiteralType","SymbolType","ThisType","TypeBox","reveal","mixed","ref","warnedMissing","TypeReference","RevealedName","RevealedValue","getRevealed","container","UnionType","normalized","registerPrimitiveTypes","t","null","Object","freeze","number","boolean","string","symbol","void","existential","registerBuiltinTypeConstructors","declareTypeConstructor","Date","isNaN","getTime","Promise","futureType","keyType","valueType","keyTypes","valueTypes","findKey","Set","registerTypePredicates","setPredicate","then","TypeInferer","primitive","inferPrimitive","inferred","inferComplex","inferFunction","inferObject","fromCharCode","fn","box","inferArray","inferDict","handler","getTypeConstructor","inferTypeParameters","inferInternal","numericIndexers","stringIndexers","values","item","inferredType","array","makeReactPropTypes","objectType","propName","componentName","makeWarningMessage","makeUnion","merged","mergeUnionTypes","aTypes","bTypes","bType","aType","makePropertyDescriptor","typeSource","descriptor","shouldAssert","augmentExistingAccessors","propertyToAccessor","makePropertyName","getClassName","resolveType","receiver","call","safeName","className","initializer","writable","config","propertyPath","check","defineProperty","warn","originalSetter","annotateValue","$DiffType","$FlowFixMeType","$KeysType","keys","literal","$ObjMapiType","mapper","applied","invoke","$ObjMapType","$PropertyType","unwrapped","$ShapeType","$SubType","$SuperType","$TupleMapType","tuple","checkGenericType","checkType","ClassType","instanceType","warnedInvalidReferences","TypeContext","mode","TypeInferrer","Class","inferrer","infer","propertyNames","fromParent","global","getPredicate","predicate","Boolean","annotate","moduleRegistry","nameRegistry","var","head","handlerRegistry","instancePrototype","getPrototypeOf","parentPrototype","parentClass","typeParametersPointer","typeParam","createContext","currentModule","ModuleExportsDeclaration","tail","unshift","method","tdz","from","clauses","pop","pattern","tests","clause","wrappedIterator","_$PropertyType","globalContext","__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__"],"mappings":"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"}